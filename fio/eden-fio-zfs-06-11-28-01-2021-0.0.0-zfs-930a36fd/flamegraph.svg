<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="582.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="565" > </text>
<g id="frames">
<g >
<title>pgrep (16 samples, 0.01%)</title><rect x="22.0" y="517" width="0.1" height="15.0" fill="rgb(248,26,12)" rx="2" ry="2" />
<text  x="24.97" y="527.5" ></text>
</g>
<g >
<title>[zedbox] (909 samples, 0.70%)</title><rect x="1181.2" y="421" width="8.3" height="15.0" fill="rgb(207,182,14)" rx="2" ry="2" />
<text  x="1184.23" y="431.5" ></text>
</g>
<g >
<title>[zedbox] (14 samples, 0.01%)</title><rect x="1186.7" y="117" width="0.1" height="15.0" fill="rgb(246,161,27)" rx="2" ry="2" />
<text  x="1189.72" y="127.5" ></text>
</g>
<g >
<title>[memlogd] (18 samples, 0.01%)</title><rect x="21.2" y="389" width="0.2" height="15.0" fill="rgb(239,210,13)" rx="2" ry="2" />
<text  x="24.21" y="399.5" ></text>
</g>
<g >
<title>z_wr_iss (85 samples, 0.07%)</title><rect x="1178.3" y="517" width="0.8" height="15.0" fill="rgb(235,9,44)" rx="2" ry="2" />
<text  x="1181.33" y="527.5" ></text>
</g>
<g >
<title>zio_execute (96 samples, 0.07%)</title><rect x="1177.4" y="453" width="0.8" height="15.0" fill="rgb(209,9,51)" rx="2" ry="2" />
<text  x="1180.36" y="463.5" ></text>
</g>
<g >
<title>irq_exit (13 samples, 0.01%)</title><rect x="1174.6" y="373" width="0.1" height="15.0" fill="rgb(232,204,41)" rx="2" ry="2" />
<text  x="1177.61" y="383.5" ></text>
</g>
<g >
<title>jq (189 samples, 0.15%)</title><rect x="18.5" y="517" width="1.7" height="15.0" fill="rgb(205,157,17)" rx="2" ry="2" />
<text  x="21.49" y="527.5" ></text>
</g>
<g >
<title>drain_array.constprop.59 (30 samples, 0.02%)</title><rect x="20.8" y="421" width="0.3" height="15.0" fill="rgb(218,148,17)" rx="2" ry="2" />
<text  x="23.79" y="431.5" ></text>
</g>
<g >
<title>qemu-img (13 samples, 0.01%)</title><rect x="22.1" y="517" width="0.1" height="15.0" fill="rgb(235,69,45)" rx="2" ry="2" />
<text  x="25.12" y="527.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).huffmanBlock (89 samples, 0.07%)</title><rect x="14.1" y="69" width="0.8" height="15.0" fill="rgb(249,187,26)" rx="2" ry="2" />
<text  x="17.08" y="79.5" ></text>
</g>
<g >
<title>memmove (17 samples, 0.01%)</title><rect x="42.7" y="501" width="0.1" height="15.0" fill="rgb(239,147,27)" rx="2" ry="2" />
<text  x="45.67" y="511.5" ></text>
</g>
<g >
<title>eventfd_write (44 samples, 0.03%)</title><rect x="30.5" y="405" width="0.4" height="15.0" fill="rgb(227,157,43)" rx="2" ry="2" />
<text  x="33.49" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (28 samples, 0.02%)</title><rect x="17.7" y="469" width="0.2" height="15.0" fill="rgb(212,67,38)" rx="2" ry="2" />
<text  x="20.66" y="479.5" ></text>
</g>
<g >
<title>runtime.notetsleepg (11 samples, 0.01%)</title><rect x="10.9" y="453" width="0.1" height="15.0" fill="rgb(217,57,18)" rx="2" ry="2" />
<text  x="13.87" y="463.5" ></text>
</g>
<g >
<title>__raw_spin_unlock_irq (13 samples, 0.01%)</title><rect x="41.1" y="293" width="0.1" height="15.0" fill="rgb(229,213,12)" rx="2" ry="2" />
<text  x="44.06" y="303.5" ></text>
</g>
<g >
<title>proc_single_show (14 samples, 0.01%)</title><rect x="1188.0" y="181" width="0.1" height="15.0" fill="rgb(217,152,18)" rx="2" ry="2" />
<text  x="1190.97" y="191.5" ></text>
</g>
<g >
<title>do_sys_open (63 samples, 0.05%)</title><rect x="29.7" y="437" width="0.6" height="15.0" fill="rgb(205,186,33)" rx="2" ry="2" />
<text  x="32.73" y="447.5" ></text>
</g>
<g >
<title>zio_write_compress (16 samples, 0.01%)</title><rect x="1179.0" y="437" width="0.1" height="15.0" fill="rgb(226,11,26)" rx="2" ry="2" />
<text  x="1181.96" y="447.5" ></text>
</g>
<g >
<title>kvm_irq_delivery_to_apic (42 samples, 0.03%)</title><rect x="35.6" y="277" width="0.3" height="15.0" fill="rgb(214,187,19)" rx="2" ry="2" />
<text  x="38.55" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (21 samples, 0.02%)</title><rect x="1188.9" y="341" width="0.1" height="15.0" fill="rgb(235,207,44)" rx="2" ry="2" />
<text  x="1191.85" y="351.5" ></text>
</g>
<g >
<title>[zedbox] (32 samples, 0.02%)</title><rect x="1179.3" y="405" width="0.3" height="15.0" fill="rgb(233,0,36)" rx="2" ry="2" />
<text  x="1182.28" y="415.5" ></text>
</g>
<g >
<title>zio_compress_data (16 samples, 0.01%)</title><rect x="1179.0" y="421" width="0.1" height="15.0" fill="rgb(211,115,3)" rx="2" ry="2" />
<text  x="1181.96" y="431.5" ></text>
</g>
<g >
<title>do_sys_open (11 samples, 0.01%)</title><rect x="1188.7" y="293" width="0.1" height="15.0" fill="rgb(244,201,8)" rx="2" ry="2" />
<text  x="1191.70" y="303.5" ></text>
</g>
<g >
<title>do_sys_poll (514 samples, 0.40%)</title><rect x="24.6" y="421" width="4.7" height="15.0" fill="rgb(222,187,49)" rx="2" ry="2" />
<text  x="27.63" y="431.5" ></text>
</g>
<g >
<title>ret_from_intr (54 samples, 0.04%)</title><rect x="1174.8" y="405" width="0.5" height="15.0" fill="rgb(253,50,51)" rx="2" ry="2" />
<text  x="1177.78" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (20 samples, 0.02%)</title><rect x="1188.9" y="325" width="0.1" height="15.0" fill="rgb(252,109,34)" rx="2" ry="2" />
<text  x="1191.85" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (17 samples, 0.01%)</title><rect x="32.9" y="421" width="0.2" height="15.0" fill="rgb(243,164,17)" rx="2" ry="2" />
<text  x="35.94" y="431.5" ></text>
</g>
<g >
<title>[memlogd] (20 samples, 0.02%)</title><rect x="21.2" y="469" width="0.2" height="15.0" fill="rgb(236,203,50)" rx="2" ry="2" />
<text  x="24.19" y="479.5" ></text>
</g>
<g >
<title>lookup_fast (11 samples, 0.01%)</title><rect x="30.0" y="357" width="0.1" height="15.0" fill="rgb(208,145,27)" rx="2" ry="2" />
<text  x="33.02" y="367.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (30 samples, 0.02%)</title><rect x="22.9" y="405" width="0.3" height="15.0" fill="rgb(248,55,23)" rx="2" ry="2" />
<text  x="25.88" y="415.5" ></text>
</g>
<g >
<title>[zedbox] (998 samples, 0.77%)</title><rect x="1180.4" y="485" width="9.2" height="15.0" fill="rgb(221,74,12)" rx="2" ry="2" />
<text  x="1183.45" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (701 samples, 0.54%)</title><rect x="24.5" y="453" width="6.4" height="15.0" fill="rgb(224,19,6)" rx="2" ry="2" />
<text  x="27.51" y="463.5" ></text>
</g>
<g >
<title>kvm_irq_delivery_to_apic_fast (40 samples, 0.03%)</title><rect x="35.6" y="261" width="0.3" height="15.0" fill="rgb(241,15,48)" rx="2" ry="2" />
<text  x="38.57" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16 samples, 0.01%)</title><rect x="1179.4" y="389" width="0.2" height="15.0" fill="rgb(232,110,4)" rx="2" ry="2" />
<text  x="1182.43" y="399.5" ></text>
</g>
<g >
<title>x86_emulate_instruction (38 samples, 0.03%)</title><rect x="36.4" y="325" width="0.4" height="15.0" fill="rgb(233,93,23)" rx="2" ry="2" />
<text  x="39.41" y="335.5" ></text>
</g>
<g >
<title>[zedbox] (348 samples, 0.27%)</title><rect x="1184.9" y="277" width="3.2" height="15.0" fill="rgb(216,65,27)" rx="2" ry="2" />
<text  x="1187.95" y="287.5" ></text>
</g>
<g >
<title>netif_receive_skb_internal (26 samples, 0.02%)</title><rect x="1175.0" y="277" width="0.2" height="15.0" fill="rgb(212,155,15)" rx="2" ry="2" />
<text  x="1178.00" y="287.5" ></text>
</g>
<g >
<title>finish_task_switch (12 samples, 0.01%)</title><rect x="22.6" y="357" width="0.1" height="15.0" fill="rgb(236,41,2)" rx="2" ry="2" />
<text  x="25.63" y="367.5" ></text>
</g>
<g >
<title>native_write_msr_safe (12 samples, 0.01%)</title><rect x="42.0" y="325" width="0.1" height="15.0" fill="rgb(232,6,15)" rx="2" ry="2" />
<text  x="44.99" y="335.5" ></text>
</g>
<g >
<title>vmx_vcpu_load (37 samples, 0.03%)</title><rect x="41.2" y="277" width="0.3" height="15.0" fill="rgb(249,17,30)" rx="2" ry="2" />
<text  x="44.20" y="287.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (17 samples, 0.01%)</title><rect x="28.9" y="309" width="0.2" height="15.0" fill="rgb(211,211,18)" rx="2" ry="2" />
<text  x="31.90" y="319.5" ></text>
</g>
<g >
<title>schedule_idle (44 samples, 0.03%)</title><rect x="324.0" y="437" width="0.4" height="15.0" fill="rgb(249,48,29)" rx="2" ry="2" />
<text  x="327.02" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (19 samples, 0.01%)</title><rect x="1189.7" y="453" width="0.2" height="15.0" fill="rgb(236,158,9)" rx="2" ry="2" />
<text  x="1192.74" y="463.5" ></text>
</g>
<g >
<title>kvm_cpu_has_extint (15 samples, 0.01%)</title><rect x="39.4" y="293" width="0.2" height="15.0" fill="rgb(252,53,28)" rx="2" ry="2" />
<text  x="42.45" y="303.5" ></text>
</g>
<g >
<title>[newlogd] (27 samples, 0.02%)</title><rect x="21.6" y="405" width="0.2" height="15.0" fill="rgb(253,201,27)" rx="2" ry="2" />
<text  x="24.57" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (24 samples, 0.02%)</title><rect x="1188.1" y="277" width="0.2" height="15.0" fill="rgb(230,65,21)" rx="2" ry="2" />
<text  x="1191.12" y="287.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (35 samples, 0.03%)</title><rect x="15.2" y="197" width="0.3" height="15.0" fill="rgb(234,18,34)" rx="2" ry="2" />
<text  x="18.19" y="207.5" ></text>
</g>
<g >
<title>zpl_write_common_iovec (28 samples, 0.02%)</title><rect x="22.9" y="373" width="0.3" height="15.0" fill="rgb(213,67,41)" rx="2" ry="2" />
<text  x="25.90" y="383.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (13 samples, 0.01%)</title><rect x="1174.6" y="405" width="0.1" height="15.0" fill="rgb(251,142,41)" rx="2" ry="2" />
<text  x="1177.61" y="415.5" ></text>
</g>
<g >
<title>sem_post (64 samples, 0.05%)</title><rect x="33.7" y="485" width="0.5" height="15.0" fill="rgb(249,209,10)" rx="2" ry="2" />
<text  x="36.66" y="495.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/api/services/diff/v1._Diff_Apply_Handler.func1 (446 samples, 0.34%)</title><rect x="12.5" y="405" width="4.1" height="15.0" fill="rgb(205,85,47)" rx="2" ry="2" />
<text  x="15.50" y="415.5" ></text>
</g>
<g >
<title>eventfd_poll (175 samples, 0.14%)</title><rect x="26.1" y="405" width="1.6" height="15.0" fill="rgb(249,211,5)" rx="2" ry="2" />
<text  x="29.12" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16 samples, 0.01%)</title><rect x="1189.3" y="389" width="0.2" height="15.0" fill="rgb(212,56,47)" rx="2" ry="2" />
<text  x="1192.31" y="399.5" ></text>
</g>
<g >
<title>__sched_text_start (17 samples, 0.01%)</title><rect x="28.9" y="357" width="0.2" height="15.0" fill="rgb(236,188,18)" rx="2" ry="2" />
<text  x="31.90" y="367.5" ></text>
</g>
<g >
<title>[ld-musl-x86_64.so.1] (12 samples, 0.01%)</title><rect x="32.6" y="469" width="0.1" height="15.0" fill="rgb(214,95,23)" rx="2" ry="2" />
<text  x="35.59" y="479.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff/apply.apply.func1 (436 samples, 0.34%)</title><rect x="12.5" y="293" width="4.0" height="15.0" fill="rgb(252,209,9)" rx="2" ry="2" />
<text  x="15.50" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (21 samples, 0.02%)</title><rect x="1188.6" y="325" width="0.2" height="15.0" fill="rgb(209,226,40)" rx="2" ry="2" />
<text  x="1191.64" y="335.5" ></text>
</g>
<g >
<title>[ld-musl-x86_64.so.1] (106 samples, 0.08%)</title><rect x="22.3" y="501" width="0.9" height="15.0" fill="rgb(219,131,23)" rx="2" ry="2" />
<text  x="25.25" y="511.5" ></text>
</g>
<g >
<title>secondary_startup_64 (124,247 samples, 96.06%)</title><rect x="43.1" y="501" width="1133.5" height="15.0" fill="rgb(239,77,36)" rx="2" ry="2" />
<text  x="46.10" y="511.5" >secondary_startup_64</text>
</g>
<g >
<title>zpl_write_common_iovec (31 samples, 0.02%)</title><rect x="15.2" y="69" width="0.3" height="15.0" fill="rgb(236,57,25)" rx="2" ry="2" />
<text  x="18.22" y="79.5" ></text>
</g>
<g >
<title>do_syscall_64 (13 samples, 0.01%)</title><rect x="1189.3" y="373" width="0.1" height="15.0" fill="rgb(220,131,5)" rx="2" ry="2" />
<text  x="1192.31" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (21 samples, 0.02%)</title><rect x="1188.4" y="293" width="0.2" height="15.0" fill="rgb(250,219,32)" rx="2" ry="2" />
<text  x="1191.43" y="303.5" ></text>
</g>
<g >
<title>zio_done (39 samples, 0.03%)</title><rect x="1177.4" y="437" width="0.3" height="15.0" fill="rgb(232,98,5)" rx="2" ry="2" />
<text  x="1180.37" y="447.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).handleStream (483 samples, 0.37%)</title><rect x="12.3" y="469" width="4.4" height="15.0" fill="rgb(243,141,46)" rx="2" ry="2" />
<text  x="15.29" y="479.5" ></text>
</g>
<g >
<title>kvm_set_msi (34 samples, 0.03%)</title><rect x="42.2" y="357" width="0.3" height="15.0" fill="rgb(248,193,43)" rx="2" ry="2" />
<text  x="45.17" y="367.5" ></text>
</g>
<g >
<title>ret_from_fork (21 samples, 0.02%)</title><rect x="1176.7" y="501" width="0.2" height="15.0" fill="rgb(237,86,1)" rx="2" ry="2" />
<text  x="1179.74" y="511.5" ></text>
</g>
<g >
<title>zpl_iter_write (30 samples, 0.02%)</title><rect x="22.9" y="389" width="0.3" height="15.0" fill="rgb(250,5,23)" rx="2" ry="2" />
<text  x="25.88" y="399.5" ></text>
</g>
<g >
<title>vmx_interrupt_allowed (125 samples, 0.10%)</title><rect x="39.8" y="309" width="1.1" height="15.0" fill="rgb(223,103,41)" rx="2" ry="2" />
<text  x="42.75" y="319.5" ></text>
</g>
<g >
<title>[zedbox] (198 samples, 0.15%)</title><rect x="1185.7" y="245" width="1.8" height="15.0" fill="rgb(208,172,41)" rx="2" ry="2" />
<text  x="1188.69" y="255.5" ></text>
</g>
<g >
<title>runtime.timerproc (17 samples, 0.01%)</title><rect x="10.8" y="469" width="0.2" height="15.0" fill="rgb(246,146,39)" rx="2" ry="2" />
<text  x="13.84" y="479.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).nextBlock (118 samples, 0.09%)</title><rect x="14.0" y="85" width="1.1" height="15.0" fill="rgb(250,43,11)" rx="2" ry="2" />
<text  x="17.01" y="95.5" ></text>
</g>
<g >
<title>ret_from_fork (23 samples, 0.02%)</title><rect x="20.3" y="501" width="0.3" height="15.0" fill="rgb(235,199,13)" rx="2" ry="2" />
<text  x="23.35" y="511.5" ></text>
</g>
<g >
<title>taskq_thread (18 samples, 0.01%)</title><rect x="1179.1" y="469" width="0.2" height="15.0" fill="rgb(219,222,8)" rx="2" ry="2" />
<text  x="1182.11" y="479.5" ></text>
</g>
<g >
<title>do_futex (34 samples, 0.03%)</title><rect x="22.5" y="437" width="0.3" height="15.0" fill="rgb(224,104,54)" rx="2" ry="2" />
<text  x="25.52" y="447.5" ></text>
</g>
<g >
<title>[jq] (119 samples, 0.09%)</title><rect x="18.5" y="501" width="1.1" height="15.0" fill="rgb(248,8,30)" rx="2" ry="2" />
<text  x="21.49" y="511.5" ></text>
</g>
<g >
<title>kvm_arch_vcpu_load (39 samples, 0.03%)</title><rect x="41.2" y="293" width="0.3" height="15.0" fill="rgb(205,126,16)" rx="2" ry="2" />
<text  x="44.18" y="303.5" ></text>
</g>
<g >
<title>[zedbox] (74 samples, 0.06%)</title><rect x="1186.3" y="197" width="0.7" height="15.0" fill="rgb(242,74,53)" rx="2" ry="2" />
<text  x="1189.31" y="207.5" ></text>
</g>
<g >
<title>dnode_sync (11 samples, 0.01%)</title><rect x="18.0" y="437" width="0.1" height="15.0" fill="rgb(213,76,47)" rx="2" ry="2" />
<text  x="20.97" y="447.5" ></text>
</g>
<g >
<title>native_read_msr (29 samples, 0.02%)</title><rect x="41.2" y="245" width="0.3" height="15.0" fill="rgb(233,137,12)" rx="2" ry="2" />
<text  x="44.21" y="255.5" ></text>
</g>
<g >
<title>virtnet_poll (30 samples, 0.02%)</title><rect x="1175.0" y="325" width="0.3" height="15.0" fill="rgb(209,83,41)" rx="2" ry="2" />
<text  x="1177.99" y="335.5" ></text>
</g>
<g >
<title>vfs_ioctl (19 samples, 0.01%)</title><rect x="1189.7" y="389" width="0.2" height="15.0" fill="rgb(226,153,23)" rx="2" ry="2" />
<text  x="1192.74" y="399.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).Read (277 samples, 0.21%)</title><rect x="12.6" y="101" width="2.6" height="15.0" fill="rgb(205,183,29)" rx="2" ry="2" />
<text  x="15.63" y="111.5" ></text>
</g>
<g >
<title>__sched_text_start (108 samples, 0.08%)</title><rect x="1175.6" y="421" width="1.0" height="15.0" fill="rgb(249,74,24)" rx="2" ry="2" />
<text  x="1178.62" y="431.5" ></text>
</g>
<g >
<title>os.Lchown (13 samples, 0.01%)</title><rect x="16.1" y="229" width="0.1" height="15.0" fill="rgb(235,48,14)" rx="2" ry="2" />
<text  x="19.13" y="239.5" ></text>
</g>
<g >
<title>wake_up_q (13 samples, 0.01%)</title><rect x="1187.2" y="149" width="0.1" height="15.0" fill="rgb(210,107,53)" rx="2" ry="2" />
<text  x="1190.16" y="159.5" ></text>
</g>
<g >
<title>ksys_read (17 samples, 0.01%)</title><rect x="30.3" y="437" width="0.2" height="15.0" fill="rgb(239,55,36)" rx="2" ry="2" />
<text  x="33.31" y="447.5" ></text>
</g>
<g >
<title>finish_task_switch (106 samples, 0.08%)</title><rect x="1175.6" y="405" width="1.0" height="15.0" fill="rgb(243,194,13)" rx="2" ry="2" />
<text  x="1178.64" y="415.5" ></text>
</g>
<g >
<title>txg_sync_thread (21 samples, 0.02%)</title><rect x="1176.7" y="453" width="0.2" height="15.0" fill="rgb(251,173,24)" rx="2" ry="2" />
<text  x="1179.74" y="463.5" ></text>
</g>
<g >
<title>kvm_lapic_reg_write (44 samples, 0.03%)</title><rect x="35.5" y="293" width="0.4" height="15.0" fill="rgb(208,208,47)" rx="2" ry="2" />
<text  x="38.54" y="303.5" ></text>
</g>
<g >
<title>new_sync_write (32 samples, 0.02%)</title><rect x="15.2" y="101" width="0.3" height="15.0" fill="rgb(209,196,10)" rx="2" ry="2" />
<text  x="18.21" y="111.5" ></text>
</g>
<g >
<title>__fcheck_files (23 samples, 0.02%)</title><rect x="25.9" y="373" width="0.2" height="15.0" fill="rgb(238,58,13)" rx="2" ry="2" />
<text  x="28.86" y="383.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (27 samples, 0.02%)</title><rect x="28.8" y="389" width="0.3" height="15.0" fill="rgb(232,7,32)" rx="2" ry="2" />
<text  x="31.81" y="399.5" ></text>
</g>
<g >
<title>handle_ept_misconfig (59 samples, 0.05%)</title><rect x="34.8" y="357" width="0.5" height="15.0" fill="rgb(220,180,17)" rx="2" ry="2" />
<text  x="37.75" y="367.5" ></text>
</g>
<g >
<title>do_filp_open (48 samples, 0.04%)</title><rect x="29.8" y="421" width="0.4" height="15.0" fill="rgb(235,107,10)" rx="2" ry="2" />
<text  x="32.79" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (876 samples, 0.68%)</title><rect x="34.5" y="453" width="8.0" height="15.0" fill="rgb(216,60,51)" rx="2" ry="2" />
<text  x="37.50" y="463.5" ></text>
</g>
<g >
<title>archive/tar.(*regFileReader).Read (281 samples, 0.22%)</title><rect x="12.6" y="197" width="2.6" height="15.0" fill="rgb(219,138,17)" rx="2" ry="2" />
<text  x="15.62" y="207.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).readHuffman (14 samples, 0.01%)</title><rect x="14.9" y="69" width="0.1" height="15.0" fill="rgb(220,8,18)" rx="2" ry="2" />
<text  x="17.90" y="79.5" ></text>
</g>
<g >
<title>poll_schedule_timeout.constprop.9 (28 samples, 0.02%)</title><rect x="28.8" y="405" width="0.3" height="15.0" fill="rgb(231,158,52)" rx="2" ry="2" />
<text  x="31.80" y="415.5" ></text>
</g>
<g >
<title>ip6tables (14 samples, 0.01%)</title><rect x="18.2" y="517" width="0.1" height="15.0" fill="rgb(240,59,8)" rx="2" ry="2" />
<text  x="21.19" y="527.5" ></text>
</g>
<g >
<title>zio_vdev_io_start (14 samples, 0.01%)</title><rect x="1178.8" y="389" width="0.1" height="15.0" fill="rgb(253,113,36)" rx="2" ry="2" />
<text  x="1181.75" y="399.5" ></text>
</g>
<g >
<title>spa_sync (21 samples, 0.02%)</title><rect x="1176.7" y="437" width="0.2" height="15.0" fill="rgb(231,103,43)" rx="2" ry="2" />
<text  x="1179.74" y="447.5" ></text>
</g>
<g >
<title>__kvm_set_msr (51 samples, 0.04%)</title><rect x="35.5" y="341" width="0.5" height="15.0" fill="rgb(223,112,42)" rx="2" ry="2" />
<text  x="38.51" y="351.5" ></text>
</g>
<g >
<title>[jq] (56 samples, 0.04%)</title><rect x="19.6" y="485" width="0.5" height="15.0" fill="rgb(231,52,33)" rx="2" ry="2" />
<text  x="22.61" y="495.5" ></text>
</g>
<g >
<title>__fget (78 samples, 0.06%)</title><rect x="25.4" y="389" width="0.7" height="15.0" fill="rgb(230,30,42)" rx="2" ry="2" />
<text  x="28.35" y="399.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).serveStreams (15 samples, 0.01%)</title><rect x="12.2" y="469" width="0.1" height="15.0" fill="rgb(206,141,21)" rx="2" ry="2" />
<text  x="15.15" y="479.5" ></text>
</g>
<g >
<title>zio_vdev_io_start (12 samples, 0.01%)</title><rect x="1178.1" y="389" width="0.1" height="15.0" fill="rgb(242,74,33)" rx="2" ry="2" />
<text  x="1181.11" y="399.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).processStreamingRPC (21 samples, 0.02%)</title><rect x="12.3" y="453" width="0.2" height="15.0" fill="rgb(251,67,3)" rx="2" ry="2" />
<text  x="15.29" y="463.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 0.06%)</title><rect x="10.3" y="485" width="0.7" height="15.0" fill="rgb(217,134,13)" rx="2" ry="2" />
<text  x="13.26" y="495.5" ></text>
</g>
<g >
<title>futex_wait (31 samples, 0.02%)</title><rect x="22.5" y="421" width="0.3" height="15.0" fill="rgb(239,102,0)" rx="2" ry="2" />
<text  x="25.54" y="431.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (22 samples, 0.02%)</title><rect x="17.7" y="453" width="0.2" height="15.0" fill="rgb(224,18,5)" rx="2" ry="2" />
<text  x="20.72" y="463.5" ></text>
</g>
<g >
<title>z_wr_int (108 samples, 0.08%)</title><rect x="1177.3" y="517" width="0.9" height="15.0" fill="rgb(213,51,47)" rx="2" ry="2" />
<text  x="1180.26" y="527.5" ></text>
</g>
<g >
<title>[zedbox] (734 samples, 0.57%)</title><rect x="1182.5" y="373" width="6.7" height="15.0" fill="rgb(218,173,43)" rx="2" ry="2" />
<text  x="1185.50" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (59 samples, 0.05%)</title><rect x="33.7" y="453" width="0.5" height="15.0" fill="rgb(212,50,47)" rx="2" ry="2" />
<text  x="36.70" y="463.5" ></text>
</g>
<g >
<title>abd_copy_off (22 samples, 0.02%)</title><rect x="1177.8" y="389" width="0.2" height="15.0" fill="rgb(220,229,45)" rx="2" ry="2" />
<text  x="1180.83" y="399.5" ></text>
</g>
<g >
<title>[zedbox] (536 samples, 0.41%)</title><rect x="1183.8" y="325" width="4.8" height="15.0" fill="rgb(220,105,14)" rx="2" ry="2" />
<text  x="1186.75" y="335.5" ></text>
</g>
<g >
<title>[zedbox] (94 samples, 0.07%)</title><rect x="1179.6" y="485" width="0.8" height="15.0" fill="rgb(220,185,10)" rx="2" ry="2" />
<text  x="1182.57" y="495.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (12 samples, 0.01%)</title><rect x="1174.8" y="341" width="0.1" height="15.0" fill="rgb(253,10,13)" rx="2" ry="2" />
<text  x="1177.78" y="351.5" ></text>
</g>
<g >
<title>native_safe_halt (30,778 samples, 23.80%)</title><rect x="43.1" y="421" width="280.8" height="15.0" fill="rgb(228,176,33)" rx="2" ry="2" />
<text  x="46.13" y="431.5" >native_safe_halt</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (52 samples, 0.04%)</title><rect x="1187.6" y="261" width="0.5" height="15.0" fill="rgb(208,120,44)" rx="2" ry="2" />
<text  x="1190.64" y="271.5" ></text>
</g>
<g >
<title>abd_iterate_func (14 samples, 0.01%)</title><rect x="1178.5" y="389" width="0.2" height="15.0" fill="rgb(213,113,13)" rx="2" ry="2" />
<text  x="1181.52" y="399.5" ></text>
</g>
<g >
<title>zfs_write (28 samples, 0.02%)</title><rect x="22.9" y="357" width="0.3" height="15.0" fill="rgb(235,130,41)" rx="2" ry="2" />
<text  x="25.90" y="367.5" ></text>
</g>
<g >
<title>zpl_create (11 samples, 0.01%)</title><rect x="30.1" y="389" width="0.1" height="15.0" fill="rgb(249,197,45)" rx="2" ry="2" />
<text  x="33.13" y="399.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/github.com/containerd/continuity/fs.walkLinks (13 samples, 0.01%)</title><rect x="16.3" y="213" width="0.1" height="15.0" fill="rgb(241,69,29)" rx="2" ry="2" />
<text  x="19.30" y="223.5" ></text>
</g>
<g >
<title>vfs_statx (18 samples, 0.01%)</title><rect x="33.2" y="405" width="0.2" height="15.0" fill="rgb(245,123,17)" rx="2" ry="2" />
<text  x="36.22" y="415.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (29 samples, 0.02%)</title><rect x="29.4" y="437" width="0.3" height="15.0" fill="rgb(229,24,35)" rx="2" ry="2" />
<text  x="32.44" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (12 samples, 0.01%)</title><rect x="1189.2" y="357" width="0.1" height="15.0" fill="rgb(219,122,23)" rx="2" ry="2" />
<text  x="1192.20" y="367.5" ></text>
</g>
<g >
<title>path_lookupat.isra.37 (17 samples, 0.01%)</title><rect x="30.0" y="389" width="0.1" height="15.0" fill="rgb(242,207,19)" rx="2" ry="2" />
<text  x="32.96" y="399.5" ></text>
</g>
<g >
<title>vdev_disk_io_start (12 samples, 0.01%)</title><rect x="1178.1" y="373" width="0.1" height="15.0" fill="rgb(210,226,20)" rx="2" ry="2" />
<text  x="1181.11" y="383.5" ></text>
</g>
<g >
<title>zpl_create (30 samples, 0.02%)</title><rect x="15.7" y="85" width="0.3" height="15.0" fill="rgb(234,19,13)" rx="2" ry="2" />
<text  x="18.73" y="95.5" ></text>
</g>
<g >
<title>cache_reap (51 samples, 0.04%)</title><rect x="20.6" y="437" width="0.5" height="15.0" fill="rgb(235,143,10)" rx="2" ry="2" />
<text  x="23.64" y="447.5" ></text>
</g>
<g >
<title>[memlogd] (20 samples, 0.02%)</title><rect x="21.2" y="453" width="0.2" height="15.0" fill="rgb(213,40,6)" rx="2" ry="2" />
<text  x="24.19" y="463.5" ></text>
</g>
<g >
<title>z_wr_iss_h (18 samples, 0.01%)</title><rect x="1179.1" y="517" width="0.2" height="15.0" fill="rgb(249,182,36)" rx="2" ry="2" />
<text  x="1182.11" y="527.5" ></text>
</g>
<g >
<title>[zedbox] (57 samples, 0.04%)</title><rect x="1186.4" y="181" width="0.5" height="15.0" fill="rgb(222,76,45)" rx="2" ry="2" />
<text  x="1189.41" y="191.5" ></text>
</g>
<g >
<title>qemu-system-x86 (2,259 samples, 1.75%)</title><rect x="22.2" y="517" width="20.7" height="15.0" fill="rgb(209,72,20)" rx="2" ry="2" />
<text  x="25.24" y="527.5" ></text>
</g>
<g >
<title>wake_up_q (50 samples, 0.04%)</title><rect x="33.8" y="389" width="0.4" height="15.0" fill="rgb(229,229,16)" rx="2" ry="2" />
<text  x="36.77" y="399.5" ></text>
</g>
<g >
<title>kvm_fetch_guest_virt (27 samples, 0.02%)</title><rect x="36.5" y="277" width="0.2" height="15.0" fill="rgb(213,155,41)" rx="2" ry="2" />
<text  x="39.49" y="287.5" ></text>
</g>
<g >
<title>vmx_set_msr (51 samples, 0.04%)</title><rect x="35.5" y="325" width="0.5" height="15.0" fill="rgb(206,124,29)" rx="2" ry="2" />
<text  x="38.51" y="335.5" ></text>
</g>
<g >
<title>__do_sys_newfstatat (20 samples, 0.02%)</title><rect x="33.2" y="421" width="0.2" height="15.0" fill="rgb(211,101,33)" rx="2" ry="2" />
<text  x="36.20" y="431.5" ></text>
</g>
<g >
<title>[unknown] (188 samples, 0.15%)</title><rect x="10.3" y="501" width="1.7" height="15.0" fill="rgb(232,192,16)" rx="2" ry="2" />
<text  x="13.26" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (884 samples, 0.68%)</title><rect x="34.5" y="485" width="8.1" height="15.0" fill="rgb(242,27,23)" rx="2" ry="2" />
<text  x="37.50" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (19 samples, 0.01%)</title><rect x="1189.7" y="469" width="0.2" height="15.0" fill="rgb(240,40,52)" rx="2" ry="2" />
<text  x="1192.74" y="479.5" ></text>
</g>
<g >
<title>kvm_vm_ioctl (39 samples, 0.03%)</title><rect x="42.1" y="389" width="0.4" height="15.0" fill="rgb(218,130,21)" rx="2" ry="2" />
<text  x="45.14" y="399.5" ></text>
</g>
<g >
<title>__do_sys_nanosleep (12 samples, 0.01%)</title><rect x="1179.4" y="357" width="0.1" height="15.0" fill="rgb(217,115,49)" rx="2" ry="2" />
<text  x="1182.43" y="367.5" ></text>
</g>
<g >
<title>sync_dnodes_task (12 samples, 0.01%)</title><rect x="18.0" y="453" width="0.1" height="15.0" fill="rgb(242,128,40)" rx="2" ry="2" />
<text  x="20.97" y="463.5" ></text>
</g>
<g >
<title>dnsmasq (110 samples, 0.09%)</title><rect x="17.0" y="517" width="1.0" height="15.0" fill="rgb(224,97,52)" rx="2" ry="2" />
<text  x="19.95" y="527.5" ></text>
</g>
<g >
<title>zpl_iter_read (17 samples, 0.01%)</title><rect x="32.9" y="341" width="0.2" height="15.0" fill="rgb(243,59,41)" rx="2" ry="2" />
<text  x="35.94" y="351.5" ></text>
</g>
<g >
<title>swapper (124,247 samples, 96.06%)</title><rect x="43.1" y="517" width="1133.5" height="15.0" fill="rgb(253,13,9)" rx="2" ry="2" />
<text  x="46.10" y="527.5" >swapper</text>
</g>
<g >
<title>__sched_text_start (44 samples, 0.03%)</title><rect x="324.0" y="421" width="0.4" height="15.0" fill="rgb(245,210,53)" rx="2" ry="2" />
<text  x="327.02" y="431.5" ></text>
</g>
<g >
<title>kvm_arch_vcpu_runnable (249 samples, 0.19%)</title><rect x="38.6" y="325" width="2.3" height="15.0" fill="rgb(205,212,47)" rx="2" ry="2" />
<text  x="41.62" y="335.5" ></text>
</g>
<g >
<title>ksys_write (49 samples, 0.04%)</title><rect x="30.5" y="437" width="0.4" height="15.0" fill="rgb(209,176,47)" rx="2" ry="2" />
<text  x="33.46" y="447.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/github.com/containerd/continuity/fs.RootPath (14 samples, 0.01%)</title><rect x="16.3" y="245" width="0.1" height="15.0" fill="rgb(250,71,3)" rx="2" ry="2" />
<text  x="19.30" y="255.5" ></text>
</g>
<g >
<title>vdev_mirror_io_start (23 samples, 0.02%)</title><rect x="1178.8" y="421" width="0.2" height="15.0" fill="rgb(213,62,15)" rx="2" ry="2" />
<text  x="1181.75" y="431.5" ></text>
</g>
<g >
<title>native_safe_halt (93,258 samples, 72.10%)</title><rect x="324.5" y="421" width="850.8" height="15.0" fill="rgb(212,75,31)" rx="2" ry="2" />
<text  x="327.47" y="431.5" >native_safe_halt</text>
</g>
<g >
<title>zfs (46 samples, 0.04%)</title><rect x="1189.6" y="517" width="0.4" height="15.0" fill="rgb(213,99,0)" rx="2" ry="2" />
<text  x="1192.58" y="527.5" ></text>
</g>
<g >
<title>vfs_write (33 samples, 0.03%)</title><rect x="15.2" y="117" width="0.3" height="15.0" fill="rgb(245,112,13)" rx="2" ry="2" />
<text  x="18.21" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (51 samples, 0.04%)</title><rect x="1187.6" y="245" width="0.5" height="15.0" fill="rgb(226,139,39)" rx="2" ry="2" />
<text  x="1190.64" y="255.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (13 samples, 0.01%)</title><rect x="41.1" y="277" width="0.1" height="15.0" fill="rgb(234,62,45)" rx="2" ry="2" />
<text  x="44.06" y="287.5" ></text>
</g>
<g >
<title>schedule (12 samples, 0.01%)</title><rect x="22.6" y="389" width="0.1" height="15.0" fill="rgb(249,107,54)" rx="2" ry="2" />
<text  x="25.63" y="399.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (18 samples, 0.01%)</title><rect x="30.9" y="453" width="0.2" height="15.0" fill="rgb(212,199,5)" rx="2" ry="2" />
<text  x="33.91" y="463.5" ></text>
</g>
<g >
<title>vfs_ioctl (874 samples, 0.68%)</title><rect x="34.5" y="405" width="8.0" height="15.0" fill="rgb(223,136,16)" rx="2" ry="2" />
<text  x="37.52" y="415.5" ></text>
</g>
<g >
<title>bufio.(*Reader).ReadByte (16 samples, 0.01%)</title><rect x="13.7" y="53" width="0.2" height="15.0" fill="rgb(208,219,22)" rx="2" ry="2" />
<text  x="16.75" y="63.5" ></text>
</g>
<g >
<title>[zedbox] (32 samples, 0.02%)</title><rect x="1179.3" y="453" width="0.3" height="15.0" fill="rgb(217,120,25)" rx="2" ry="2" />
<text  x="1182.28" y="463.5" ></text>
</g>
<g >
<title>txg_sync (21 samples, 0.02%)</title><rect x="1176.7" y="517" width="0.2" height="15.0" fill="rgb(248,68,37)" rx="2" ry="2" />
<text  x="1179.74" y="527.5" ></text>
</g>
<g >
<title>__kvm_io_bus_write (57 samples, 0.04%)</title><rect x="34.8" y="325" width="0.5" height="15.0" fill="rgb(253,9,26)" rx="2" ry="2" />
<text  x="37.77" y="335.5" ></text>
</g>
<g >
<title>kvm_irq_delivery_to_apic_fast (33 samples, 0.03%)</title><rect x="42.2" y="325" width="0.3" height="15.0" fill="rgb(215,120,1)" rx="2" ry="2" />
<text  x="45.18" y="335.5" ></text>
</g>
<g >
<title>[newlogd] (37 samples, 0.03%)</title><rect x="21.5" y="485" width="0.4" height="15.0" fill="rgb(239,26,28)" rx="2" ry="2" />
<text  x="24.52" y="495.5" ></text>
</g>
<g >
<title>task_work_run (14 samples, 0.01%)</title><rect x="30.9" y="437" width="0.2" height="15.0" fill="rgb(240,175,5)" rx="2" ry="2" />
<text  x="33.95" y="447.5" ></text>
</g>
<g >
<title>[newlogd] (11 samples, 0.01%)</title><rect x="21.6" y="341" width="0.1" height="15.0" fill="rgb(248,34,1)" rx="2" ry="2" />
<text  x="24.64" y="351.5" ></text>
</g>
<g >
<title>__do_insn_fetch_bytes (29 samples, 0.02%)</title><rect x="36.5" y="293" width="0.2" height="15.0" fill="rgb(238,28,54)" rx="2" ry="2" />
<text  x="39.48" y="303.5" ></text>
</g>
<g >
<title>do_pwritev (30 samples, 0.02%)</title><rect x="22.9" y="453" width="0.3" height="15.0" fill="rgb(246,116,32)" rx="2" ry="2" />
<text  x="25.88" y="463.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (49 samples, 0.04%)</title><rect x="33.8" y="357" width="0.4" height="15.0" fill="rgb(229,63,7)" rx="2" ry="2" />
<text  x="36.77" y="367.5" ></text>
</g>
<g >
<title>x86_decode_insn (31 samples, 0.02%)</title><rect x="36.5" y="309" width="0.3" height="15.0" fill="rgb(247,10,14)" rx="2" ry="2" />
<text  x="39.48" y="319.5" ></text>
</g>
<g >
<title>[ld-musl-x86_64.so.1] (106 samples, 0.08%)</title><rect x="17.0" y="501" width="0.9" height="15.0" fill="rgb(244,172,2)" rx="2" ry="2" />
<text  x="19.95" y="511.5" ></text>
</g>
<g >
<title>taskq_thread (85 samples, 0.07%)</title><rect x="1178.3" y="469" width="0.8" height="15.0" fill="rgb(207,98,14)" rx="2" ry="2" />
<text  x="1181.33" y="479.5" ></text>
</g>
<g >
<title>do_iter_write (30 samples, 0.02%)</title><rect x="22.9" y="421" width="0.3" height="15.0" fill="rgb(249,86,28)" rx="2" ry="2" />
<text  x="25.88" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (33 samples, 0.03%)</title><rect x="15.2" y="165" width="0.3" height="15.0" fill="rgb(220,213,26)" rx="2" ry="2" />
<text  x="18.21" y="175.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (27 samples, 0.02%)</title><rect x="1175.3" y="437" width="0.2" height="15.0" fill="rgb(243,133,31)" rx="2" ry="2" />
<text  x="1178.28" y="447.5" ></text>
</g>
<g >
<title>lz4_compress_zfs (15 samples, 0.01%)</title><rect x="1179.0" y="405" width="0.1" height="15.0" fill="rgb(249,154,38)" rx="2" ry="2" />
<text  x="1181.97" y="415.5" ></text>
</g>
<g >
<title>do_idle (30,838 samples, 23.84%)</title><rect x="43.1" y="453" width="281.3" height="15.0" fill="rgb(205,12,35)" rx="2" ry="2" />
<text  x="46.10" y="463.5" >do_idle</text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).processUnaryRPC (462 samples, 0.36%)</title><rect x="12.5" y="453" width="4.2" height="15.0" fill="rgb(225,125,23)" rx="2" ry="2" />
<text  x="15.48" y="463.5" ></text>
</g>
<g >
<title>syscall.Syscall6 (12 samples, 0.01%)</title><rect x="16.1" y="213" width="0.1" height="15.0" fill="rgb(216,31,16)" rx="2" ry="2" />
<text  x="19.14" y="223.5" ></text>
</g>
<g >
<title>path_openat (32 samples, 0.02%)</title><rect x="15.7" y="101" width="0.3" height="15.0" fill="rgb(246,141,15)" rx="2" ry="2" />
<text  x="18.71" y="111.5" ></text>
</g>
<g >
<title>io.(*teeReader).Read (281 samples, 0.22%)</title><rect x="12.6" y="165" width="2.6" height="15.0" fill="rgb(225,174,28)" rx="2" ry="2" />
<text  x="15.62" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (719 samples, 0.56%)</title><rect x="24.5" y="469" width="6.6" height="15.0" fill="rgb(241,85,41)" rx="2" ry="2" />
<text  x="27.51" y="479.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/github.com/grpc-ecosystem/go-grpc-prometheus.(*ServerMetrics).UnaryServerInterceptor.func1 (446 samples, 0.34%)</title><rect x="12.5" y="421" width="4.1" height="15.0" fill="rgb(225,110,13)" rx="2" ry="2" />
<text  x="15.50" y="431.5" ></text>
</g>
<g >
<title>zfs_create (30 samples, 0.02%)</title><rect x="15.7" y="69" width="0.3" height="15.0" fill="rgb(252,220,25)" rx="2" ry="2" />
<text  x="18.73" y="79.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (75 samples, 0.06%)</title><rect x="22.5" y="485" width="0.7" height="15.0" fill="rgb(211,209,38)" rx="2" ry="2" />
<text  x="25.52" y="495.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/github.com/grpc-ecosystem/go-grpc-prometheus.(*monitoredServerStream).RecvMsg (11 samples, 0.01%)</title><rect x="12.3" y="373" width="0.1" height="15.0" fill="rgb(230,137,54)" rx="2" ry="2" />
<text  x="15.29" y="383.5" ></text>
</g>
<g >
<title>[ld-musl-x86_64.so.1] (17 samples, 0.01%)</title><rect x="32.9" y="453" width="0.2" height="15.0" fill="rgb(228,23,39)" rx="2" ry="2" />
<text  x="35.94" y="463.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (105 samples, 0.08%)</title><rect x="1175.6" y="373" width="1.0" height="15.0" fill="rgb(206,103,33)" rx="2" ry="2" />
<text  x="1178.65" y="383.5" ></text>
</g>
<g >
<title>abd_copy_off_cb (20 samples, 0.02%)</title><rect x="1177.8" y="357" width="0.2" height="15.0" fill="rgb(248,112,54)" rx="2" ry="2" />
<text  x="1180.83" y="367.5" ></text>
</g>
<g >
<title>[zedbox] (996 samples, 0.77%)</title><rect x="1180.5" y="469" width="9.1" height="15.0" fill="rgb(240,224,46)" rx="2" ry="2" />
<text  x="1183.47" y="479.5" ></text>
</g>
<g >
<title>scsi_end_request (11 samples, 0.01%)</title><rect x="1174.9" y="309" width="0.1" height="15.0" fill="rgb(223,6,32)" rx="2" ry="2" />
<text  x="1177.89" y="319.5" ></text>
</g>
<g >
<title>__apic_accept_irq (38 samples, 0.03%)</title><rect x="35.6" y="245" width="0.3" height="15.0" fill="rgb(218,51,34)" rx="2" ry="2" />
<text  x="38.57" y="255.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff.(*compressedProcessor).Read (281 samples, 0.22%)</title><rect x="12.6" y="149" width="2.6" height="15.0" fill="rgb(216,80,39)" rx="2" ry="2" />
<text  x="15.62" y="159.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.openFile (46 samples, 0.04%)</title><rect x="15.7" y="229" width="0.4" height="15.0" fill="rgb(232,124,32)" rx="2" ry="2" />
<text  x="18.68" y="239.5" ></text>
</g>
<g >
<title>net_rx_action (30 samples, 0.02%)</title><rect x="1175.0" y="341" width="0.3" height="15.0" fill="rgb(225,219,7)" rx="2" ry="2" />
<text  x="1177.99" y="351.5" ></text>
</g>
<g >
<title>zfsdev_ioctl (19 samples, 0.01%)</title><rect x="1189.7" y="373" width="0.2" height="15.0" fill="rgb(245,101,52)" rx="2" ry="2" />
<text  x="1192.74" y="383.5" ></text>
</g>
<g >
<title>ioeventfd_write (53 samples, 0.04%)</title><rect x="34.8" y="309" width="0.5" height="15.0" fill="rgb(229,76,40)" rx="2" ry="2" />
<text  x="37.79" y="319.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).serveStreams.func1.1 (483 samples, 0.37%)</title><rect x="12.3" y="485" width="4.4" height="15.0" fill="rgb(237,10,35)" rx="2" ry="2" />
<text  x="15.29" y="495.5" ></text>
</g>
<g >
<title>read_tsc (68 samples, 0.05%)</title><rect x="37.2" y="309" width="0.6" height="15.0" fill="rgb(250,207,16)" rx="2" ry="2" />
<text  x="40.17" y="319.5" ></text>
</g>
<g >
<title>fstatat (20 samples, 0.02%)</title><rect x="33.2" y="469" width="0.2" height="15.0" fill="rgb(214,94,40)" rx="2" ry="2" />
<text  x="36.20" y="479.5" ></text>
</g>
<g >
<title>proc_pid_status (13 samples, 0.01%)</title><rect x="1188.0" y="165" width="0.1" height="15.0" fill="rgb(245,28,3)" rx="2" ry="2" />
<text  x="1190.98" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (37 samples, 0.03%)</title><rect x="1187.2" y="229" width="0.3" height="15.0" fill="rgb(230,219,43)" rx="2" ry="2" />
<text  x="1190.15" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (33 samples, 0.03%)</title><rect x="15.7" y="149" width="0.3" height="15.0" fill="rgb(237,81,33)" rx="2" ry="2" />
<text  x="18.71" y="159.5" ></text>
</g>
<g >
<title>ksys_write (33 samples, 0.03%)</title><rect x="15.2" y="133" width="0.3" height="15.0" fill="rgb(215,8,33)" rx="2" ry="2" />
<text  x="18.21" y="143.5" ></text>
</g>
<g >
<title>[zedbox] (464 samples, 0.36%)</title><rect x="1184.2" y="309" width="4.2" height="15.0" fill="rgb(253,157,15)" rx="2" ry="2" />
<text  x="1187.20" y="319.5" ></text>
</g>
<g >
<title>zfs_write (31 samples, 0.02%)</title><rect x="15.2" y="53" width="0.3" height="15.0" fill="rgb(243,178,52)" rx="2" ry="2" />
<text  x="18.22" y="63.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (21 samples, 0.02%)</title><rect x="1188.4" y="309" width="0.2" height="15.0" fill="rgb(246,1,19)" rx="2" ry="2" />
<text  x="1191.43" y="319.5" ></text>
</g>
<g >
<title>try_to_wake_up (13 samples, 0.01%)</title><rect x="1187.2" y="133" width="0.1" height="15.0" fill="rgb(231,84,5)" rx="2" ry="2" />
<text  x="1190.16" y="143.5" ></text>
</g>
<g >
<title>syscall.Syscall6 (34 samples, 0.03%)</title><rect x="15.7" y="181" width="0.3" height="15.0" fill="rgb(245,166,5)" rx="2" ry="2" />
<text  x="18.70" y="191.5" ></text>
</g>
<g >
<title>kthreadd (23 samples, 0.02%)</title><rect x="20.3" y="517" width="0.3" height="15.0" fill="rgb(245,80,44)" rx="2" ry="2" />
<text  x="23.35" y="527.5" ></text>
</g>
<g >
<title>zio_execute (18 samples, 0.01%)</title><rect x="1179.1" y="453" width="0.2" height="15.0" fill="rgb(215,35,36)" rx="2" ry="2" />
<text  x="1182.11" y="463.5" ></text>
</g>
<g >
<title>schedule_idle (109 samples, 0.08%)</title><rect x="1175.6" y="437" width="1.0" height="15.0" fill="rgb(211,26,50)" rx="2" ry="2" />
<text  x="1178.61" y="447.5" ></text>
</g>
<g >
<title>arc_write_ready (20 samples, 0.02%)</title><rect x="1178.5" y="421" width="0.2" height="15.0" fill="rgb(213,133,3)" rx="2" ry="2" />
<text  x="1181.52" y="431.5" ></text>
</g>
<g >
<title>[newlogd] (37 samples, 0.03%)</title><rect x="21.5" y="501" width="0.4" height="15.0" fill="rgb(211,222,23)" rx="2" ry="2" />
<text  x="24.52" y="511.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.Apply (436 samples, 0.34%)</title><rect x="12.5" y="277" width="4.0" height="15.0" fill="rgb(235,95,46)" rx="2" ry="2" />
<text  x="15.50" y="287.5" ></text>
</g>
<g >
<title>[zedbox] (797 samples, 0.62%)</title><rect x="1182.0" y="389" width="7.3" height="15.0" fill="rgb(240,76,30)" rx="2" ry="2" />
<text  x="1185.04" y="399.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (13 samples, 0.01%)</title><rect x="1174.6" y="357" width="0.1" height="15.0" fill="rgb(236,136,0)" rx="2" ry="2" />
<text  x="1177.61" y="367.5" ></text>
</g>
<g >
<title>wwan-init.sh (15 samples, 0.01%)</title><rect x="1177.1" y="517" width="0.1" height="15.0" fill="rgb(218,96,11)" rx="2" ry="2" />
<text  x="1180.05" y="527.5" ></text>
</g>
<g >
<title>finish_task_switch (43 samples, 0.03%)</title><rect x="324.0" y="405" width="0.4" height="15.0" fill="rgb(208,218,3)" rx="2" ry="2" />
<text  x="327.03" y="415.5" ></text>
</g>
<g >
<title>eventfd_signal (53 samples, 0.04%)</title><rect x="34.8" y="293" width="0.5" height="15.0" fill="rgb(250,93,47)" rx="2" ry="2" />
<text  x="37.79" y="303.5" ></text>
</g>
<g >
<title>vfs_writev (30 samples, 0.02%)</title><rect x="22.9" y="437" width="0.3" height="15.0" fill="rgb(233,219,53)" rx="2" ry="2" />
<text  x="25.88" y="447.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).huffSym (65 samples, 0.05%)</title><rect x="13.3" y="69" width="0.6" height="15.0" fill="rgb(229,168,32)" rx="2" ry="2" />
<text  x="16.30" y="79.5" ></text>
</g>
<g >
<title>kthread (21 samples, 0.02%)</title><rect x="1176.7" y="485" width="0.2" height="15.0" fill="rgb(232,85,20)" rx="2" ry="2" />
<text  x="1179.74" y="495.5" ></text>
</g>
<g >
<title>__fget_light (85 samples, 0.07%)</title><rect x="25.3" y="405" width="0.8" height="15.0" fill="rgb(230,223,36)" rx="2" ry="2" />
<text  x="28.29" y="415.5" ></text>
</g>
<g >
<title>seq_read (18 samples, 0.01%)</title><rect x="1187.9" y="197" width="0.2" height="15.0" fill="rgb(213,82,14)" rx="2" ry="2" />
<text  x="1190.94" y="207.5" ></text>
</g>
<g >
<title>do_vfs_ioctl (19 samples, 0.01%)</title><rect x="1189.7" y="405" width="0.2" height="15.0" fill="rgb(227,95,20)" rx="2" ry="2" />
<text  x="1192.74" y="415.5" ></text>
</g>
<g >
<title>runtime.systemstack (24 samples, 0.02%)</title><rect x="10.6" y="469" width="0.2" height="15.0" fill="rgb(254,50,10)" rx="2" ry="2" />
<text  x="13.62" y="479.5" ></text>
</g>
<g >
<title>zfs_mknode (11 samples, 0.01%)</title><rect x="15.9" y="53" width="0.1" height="15.0" fill="rgb(242,223,35)" rx="2" ry="2" />
<text  x="18.90" y="63.5" ></text>
</g>
<g >
<title>__pollwait (48 samples, 0.04%)</title><rect x="26.6" y="389" width="0.5" height="15.0" fill="rgb(232,56,26)" rx="2" ry="2" />
<text  x="29.61" y="399.5" ></text>
</g>
<g >
<title>[newlogd] (34 samples, 0.03%)</title><rect x="21.5" y="437" width="0.4" height="15.0" fill="rgb(228,14,26)" rx="2" ry="2" />
<text  x="24.55" y="447.5" ></text>
</g>
<g >
<title>kthread (18 samples, 0.01%)</title><rect x="1179.1" y="485" width="0.2" height="15.0" fill="rgb(211,185,34)" rx="2" ry="2" />
<text  x="1182.11" y="495.5" ></text>
</g>
<g >
<title>abd_copy_from_buf_off (14 samples, 0.01%)</title><rect x="1178.5" y="405" width="0.2" height="15.0" fill="rgb(223,207,53)" rx="2" ry="2" />
<text  x="1181.52" y="415.5" ></text>
</g>
<g >
<title>dmu_read_uio_dnode (12 samples, 0.01%)</title><rect x="32.9" y="277" width="0.2" height="15.0" fill="rgb(247,52,12)" rx="2" ry="2" />
<text  x="35.94" y="287.5" ></text>
</g>
<g >
<title>[zedbox] (1,003 samples, 0.78%)</title><rect x="1180.4" y="501" width="9.2" height="15.0" fill="rgb(243,113,5)" rx="2" ry="2" />
<text  x="1183.43" y="511.5" ></text>
</g>
<g >
<title>containerd-shim (20 samples, 0.02%)</title><rect x="10.1" y="517" width="0.2" height="15.0" fill="rgb(221,161,12)" rx="2" ry="2" />
<text  x="13.08" y="527.5" ></text>
</g>
<g >
<title>zio_execute (84 samples, 0.06%)</title><rect x="1178.3" y="453" width="0.8" height="15.0" fill="rgb(205,18,34)" rx="2" ry="2" />
<text  x="1181.34" y="463.5" ></text>
</g>
<g >
<title>os.openFileNolog (37 samples, 0.03%)</title><rect x="15.7" y="197" width="0.3" height="15.0" fill="rgb(247,21,20)" rx="2" ry="2" />
<text  x="18.68" y="207.5" ></text>
</g>
<g >
<title>fput_many (40 samples, 0.03%)</title><rect x="27.7" y="405" width="0.4" height="15.0" fill="rgb(234,140,8)" rx="2" ry="2" />
<text  x="30.73" y="415.5" ></text>
</g>
<g >
<title>ret_from_fork (51 samples, 0.04%)</title><rect x="20.6" y="501" width="0.5" height="15.0" fill="rgb(213,18,40)" rx="2" ry="2" />
<text  x="23.64" y="511.5" ></text>
</g>
<g >
<title>os.OpenFile (37 samples, 0.03%)</title><rect x="15.7" y="213" width="0.3" height="15.0" fill="rgb(216,122,38)" rx="2" ry="2" />
<text  x="18.68" y="223.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.createTarFile (406 samples, 0.31%)</title><rect x="12.6" y="245" width="3.7" height="15.0" fill="rgb(213,123,34)" rx="2" ry="2" />
<text  x="15.58" y="255.5" ></text>
</g>
<g >
<title>ksys_ioctl (19 samples, 0.01%)</title><rect x="1189.7" y="421" width="0.2" height="15.0" fill="rgb(247,24,54)" rx="2" ry="2" />
<text  x="1192.74" y="431.5" ></text>
</g>
<g >
<title>[memlogd] (21 samples, 0.02%)</title><rect x="21.2" y="485" width="0.2" height="15.0" fill="rgb(254,129,24)" rx="2" ry="2" />
<text  x="24.18" y="495.5" ></text>
</g>
<g >
<title>__do_sys_ppoll (523 samples, 0.40%)</title><rect x="24.6" y="437" width="4.8" height="15.0" fill="rgb(250,44,16)" rx="2" ry="2" />
<text  x="27.63" y="447.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive/compression.(*readCloserWrapper).Read (280 samples, 0.22%)</title><rect x="12.6" y="133" width="2.6" height="15.0" fill="rgb(246,207,28)" rx="2" ry="2" />
<text  x="15.63" y="143.5" ></text>
</g>
<g >
<title>do_iter_read (17 samples, 0.01%)</title><rect x="32.9" y="373" width="0.2" height="15.0" fill="rgb(208,225,11)" rx="2" ry="2" />
<text  x="35.94" y="383.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (53 samples, 0.04%)</title><rect x="34.8" y="277" width="0.5" height="15.0" fill="rgb(232,61,50)" rx="2" ry="2" />
<text  x="37.79" y="287.5" ></text>
</g>
<g >
<title>[memlogd] (18 samples, 0.01%)</title><rect x="21.2" y="405" width="0.2" height="15.0" fill="rgb(254,23,13)" rx="2" ry="2" />
<text  x="24.21" y="415.5" ></text>
</g>
<g >
<title>cpu_startup_entry (30,838 samples, 23.84%)</title><rect x="43.1" y="469" width="281.3" height="15.0" fill="rgb(250,192,48)" rx="2" ry="2" />
<text  x="46.10" y="479.5" >cpu_startup_entry</text>
</g>
<g >
<title>do_syscall_64 (878 samples, 0.68%)</title><rect x="34.5" y="469" width="8.0" height="15.0" fill="rgb(248,32,50)" rx="2" ry="2" />
<text  x="37.50" y="479.5" ></text>
</g>
<g >
<title>[newlogd] (16 samples, 0.01%)</title><rect x="21.6" y="373" width="0.2" height="15.0" fill="rgb(253,184,35)" rx="2" ry="2" />
<text  x="24.61" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (17 samples, 0.01%)</title><rect x="32.9" y="437" width="0.2" height="15.0" fill="rgb(229,15,37)" rx="2" ry="2" />
<text  x="35.94" y="447.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (36 samples, 0.03%)</title><rect x="35.6" y="197" width="0.3" height="15.0" fill="rgb(206,104,23)" rx="2" ry="2" />
<text  x="38.59" y="207.5" ></text>
</g>
<g >
<title>process_one_work (51 samples, 0.04%)</title><rect x="20.6" y="453" width="0.5" height="15.0" fill="rgb(227,190,0)" rx="2" ry="2" />
<text  x="23.64" y="463.5" ></text>
</g>
<g >
<title>vmx_read_guest_seg_ar (14 samples, 0.01%)</title><rect x="36.6" y="245" width="0.1" height="15.0" fill="rgb(242,198,46)" rx="2" ry="2" />
<text  x="39.61" y="255.5" ></text>
</g>
<g >
<title>runtime.gcDrain (24 samples, 0.02%)</title><rect x="10.6" y="437" width="0.2" height="15.0" fill="rgb(209,99,42)" rx="2" ry="2" />
<text  x="13.62" y="447.5" ></text>
</g>
<g >
<title>zedbox (1,129 samples, 0.87%)</title><rect x="1179.3" y="517" width="10.3" height="15.0" fill="rgb(208,130,24)" rx="2" ry="2" />
<text  x="1182.28" y="527.5" ></text>
</g>
<g >
<title>timekeeping_get_ns (93 samples, 0.07%)</title><rect x="37.0" y="325" width="0.8" height="15.0" fill="rgb(226,63,50)" rx="2" ry="2" />
<text  x="39.97" y="335.5" ></text>
</g>
<g >
<title>kvm_vcpu_wake_up (29 samples, 0.02%)</title><rect x="42.2" y="277" width="0.3" height="15.0" fill="rgb(250,100,14)" rx="2" ry="2" />
<text  x="45.19" y="287.5" ></text>
</g>
<g >
<title>kvm_skip_emulated_instruction (49 samples, 0.04%)</title><rect x="36.3" y="357" width="0.5" height="15.0" fill="rgb(222,42,16)" rx="2" ry="2" />
<text  x="39.32" y="367.5" ></text>
</g>
<g >
<title>[memlogd] (18 samples, 0.01%)</title><rect x="21.2" y="421" width="0.2" height="15.0" fill="rgb(230,103,22)" rx="2" ry="2" />
<text  x="24.21" y="431.5" ></text>
</g>
<g >
<title>[ld-musl-x86_64.so.1] (12 samples, 0.01%)</title><rect x="22.0" y="501" width="0.1" height="15.0" fill="rgb(246,79,54)" rx="2" ry="2" />
<text  x="24.97" y="511.5" ></text>
</g>
<g >
<title>kvm_vcpu_block (538 samples, 0.42%)</title><rect x="36.8" y="357" width="4.9" height="15.0" fill="rgb(242,145,48)" rx="2" ry="2" />
<text  x="39.78" y="367.5" ></text>
</g>
<g >
<title>[unknown] (32 samples, 0.02%)</title><rect x="1179.3" y="485" width="0.3" height="15.0" fill="rgb(237,25,13)" rx="2" ry="2" />
<text  x="1182.28" y="495.5" ></text>
</g>
<g >
<title>vdev_queue_io_to_issue (28 samples, 0.02%)</title><rect x="1177.8" y="405" width="0.2" height="15.0" fill="rgb(237,90,46)" rx="2" ry="2" />
<text  x="1180.79" y="415.5" ></text>
</g>
<g >
<title>runtime.sysmon (11 samples, 0.01%)</title><rect x="10.5" y="469" width="0.1" height="15.0" fill="rgb(242,14,34)" rx="2" ry="2" />
<text  x="13.52" y="479.5" ></text>
</g>
<g >
<title>memlogd (31 samples, 0.02%)</title><rect x="21.2" y="517" width="0.3" height="15.0" fill="rgb(205,7,38)" rx="2" ry="2" />
<text  x="24.18" y="527.5" ></text>
</g>
<g >
<title>kvm_set_shared_msr (16 samples, 0.01%)</title><rect x="42.0" y="341" width="0.1" height="15.0" fill="rgb(253,220,15)" rx="2" ry="2" />
<text  x="44.96" y="351.5" ></text>
</g>
<g >
<title>[newlogd] (26 samples, 0.02%)</title><rect x="21.6" y="389" width="0.2" height="15.0" fill="rgb(238,207,5)" rx="2" ry="2" />
<text  x="24.58" y="399.5" ></text>
</g>
<g >
<title>[unknown] (1,166 samples, 0.90%)</title><rect x="23.7" y="501" width="10.6" height="15.0" fill="rgb(242,40,31)" rx="2" ry="2" />
<text  x="26.68" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (20 samples, 0.02%)</title><rect x="33.2" y="437" width="0.2" height="15.0" fill="rgb(246,199,14)" rx="2" ry="2" />
<text  x="36.20" y="447.5" ></text>
</g>
<g >
<title>newlogd (43 samples, 0.03%)</title><rect x="21.5" y="517" width="0.4" height="15.0" fill="rgb(213,63,36)" rx="2" ry="2" />
<text  x="24.52" y="527.5" ></text>
</g>
<g >
<title>[newlogd] (36 samples, 0.03%)</title><rect x="21.5" y="453" width="0.4" height="15.0" fill="rgb(212,129,0)" rx="2" ry="2" />
<text  x="24.53" y="463.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).huffSym (12 samples, 0.01%)</title><rect x="12.6" y="85" width="0.1" height="15.0" fill="rgb(242,94,52)" rx="2" ry="2" />
<text  x="15.64" y="95.5" ></text>
</g>
<g >
<title>[memlogd] (16 samples, 0.01%)</title><rect x="21.2" y="357" width="0.2" height="15.0" fill="rgb(248,123,22)" rx="2" ry="2" />
<text  x="24.23" y="367.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (29 samples, 0.02%)</title><rect x="42.2" y="261" width="0.3" height="15.0" fill="rgb(240,79,38)" rx="2" ry="2" />
<text  x="45.19" y="271.5" ></text>
</g>
<g >
<title>ret_from_fork (18 samples, 0.01%)</title><rect x="1179.1" y="501" width="0.2" height="15.0" fill="rgb(235,185,8)" rx="2" ry="2" />
<text  x="1182.11" y="511.5" ></text>
</g>
<g >
<title>[zedbox] (856 samples, 0.66%)</title><rect x="1181.6" y="405" width="7.9" height="15.0" fill="rgb(210,127,22)" rx="2" ry="2" />
<text  x="1184.64" y="415.5" ></text>
</g>
<g >
<title>receive_buf (30 samples, 0.02%)</title><rect x="1175.0" y="309" width="0.3" height="15.0" fill="rgb(206,131,16)" rx="2" ry="2" />
<text  x="1177.99" y="319.5" ></text>
</g>
<g >
<title>vfs_read (11 samples, 0.01%)</title><rect x="30.4" y="421" width="0.1" height="15.0" fill="rgb(217,74,11)" rx="2" ry="2" />
<text  x="33.36" y="431.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (54 samples, 0.04%)</title><rect x="1174.8" y="357" width="0.5" height="15.0" fill="rgb(235,116,29)" rx="2" ry="2" />
<text  x="1177.78" y="367.5" ></text>
</g>
<g >
<title>[zedbox] (13 samples, 0.01%)</title><rect x="1179.3" y="373" width="0.1" height="15.0" fill="rgb(231,143,25)" rx="2" ry="2" />
<text  x="1182.31" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (15 samples, 0.01%)</title><rect x="1187.5" y="245" width="0.1" height="15.0" fill="rgb(248,129,7)" rx="2" ry="2" />
<text  x="1190.50" y="255.5" ></text>
</g>
<g >
<title>ret_from_fork (108 samples, 0.08%)</title><rect x="1177.3" y="501" width="0.9" height="15.0" fill="rgb(207,153,15)" rx="2" ry="2" />
<text  x="1180.26" y="511.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/github.com/grpc-ecosystem/go-grpc-prometheus.(*ServerMetrics).StreamServerInterceptor.func1 (21 samples, 0.02%)</title><rect x="12.3" y="437" width="0.2" height="15.0" fill="rgb(214,17,37)" rx="2" ry="2" />
<text  x="15.29" y="447.5" ></text>
</g>
<g >
<title>kvm_irq_delivery_to_apic (33 samples, 0.03%)</title><rect x="42.2" y="341" width="0.3" height="15.0" fill="rgb(244,88,40)" rx="2" ry="2" />
<text  x="45.18" y="351.5" ></text>
</g>
<g >
<title>zpl_read_common_iovec (16 samples, 0.01%)</title><rect x="32.9" y="325" width="0.2" height="15.0" fill="rgb(223,169,38)" rx="2" ry="2" />
<text  x="35.94" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (33 samples, 0.03%)</title><rect x="15.2" y="149" width="0.3" height="15.0" fill="rgb(243,62,44)" rx="2" ry="2" />
<text  x="18.21" y="159.5" ></text>
</g>
<g >
<title>kvm_emulate_wrmsr (55 samples, 0.04%)</title><rect x="35.5" y="357" width="0.5" height="15.0" fill="rgb(208,168,19)" rx="2" ry="2" />
<text  x="38.49" y="367.5" ></text>
</g>
<g >
<title>[zedbox] (31 samples, 0.02%)</title><rect x="1186.6" y="149" width="0.3" height="15.0" fill="rgb(253,182,30)" rx="2" ry="2" />
<text  x="1189.61" y="159.5" ></text>
</g>
<g >
<title>finish_task_switch (17 samples, 0.01%)</title><rect x="28.9" y="341" width="0.2" height="15.0" fill="rgb(242,163,10)" rx="2" ry="2" />
<text  x="31.90" y="351.5" ></text>
</g>
<g >
<title>__apic_accept_irq (33 samples, 0.03%)</title><rect x="42.2" y="309" width="0.3" height="15.0" fill="rgb(215,111,38)" rx="2" ry="2" />
<text  x="45.18" y="319.5" ></text>
</g>
<g >
<title>[unknown] (126 samples, 0.10%)</title><rect x="1179.3" y="501" width="1.1" height="15.0" fill="rgb(242,18,6)" rx="2" ry="2" />
<text  x="1182.28" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (59 samples, 0.05%)</title><rect x="33.7" y="469" width="0.5" height="15.0" fill="rgb(247,16,28)" rx="2" ry="2" />
<text  x="36.70" y="479.5" ></text>
</g>
<g >
<title>poll_freewait (78 samples, 0.06%)</title><rect x="28.1" y="405" width="0.7" height="15.0" fill="rgb(248,57,54)" rx="2" ry="2" />
<text  x="31.09" y="415.5" ></text>
</g>
<g >
<title>ktime_get (106 samples, 0.08%)</title><rect x="36.8" y="341" width="1.0" height="15.0" fill="rgb(240,141,43)" rx="2" ry="2" />
<text  x="39.85" y="351.5" ></text>
</g>
<g >
<title>[qemu-system-x86_64] (18 samples, 0.01%)</title><rect x="32.8" y="469" width="0.1" height="15.0" fill="rgb(222,167,19)" rx="2" ry="2" />
<text  x="35.77" y="479.5" ></text>
</g>
<g >
<title>zio_nowait (14 samples, 0.01%)</title><rect x="1178.8" y="405" width="0.1" height="15.0" fill="rgb(245,66,42)" rx="2" ry="2" />
<text  x="1181.75" y="415.5" ></text>
</g>
<g >
<title>do_fchownat (12 samples, 0.01%)</title><rect x="16.1" y="149" width="0.1" height="15.0" fill="rgb(243,17,45)" rx="2" ry="2" />
<text  x="19.14" y="159.5" ></text>
</g>
<g >
<title>arch_local_irq_restore (13 samples, 0.01%)</title><rect x="1187.2" y="101" width="0.1" height="15.0" fill="rgb(239,148,48)" rx="2" ry="2" />
<text  x="1190.16" y="111.5" ></text>
</g>
<g >
<title>[qemu-system-x86_64] (94 samples, 0.07%)</title><rect x="31.7" y="485" width="0.9" height="15.0" fill="rgb(231,71,0)" rx="2" ry="2" />
<text  x="34.73" y="495.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (26 samples, 0.02%)</title><rect x="1175.0" y="261" width="0.2" height="15.0" fill="rgb(245,68,40)" rx="2" ry="2" />
<text  x="1178.00" y="271.5" ></text>
</g>
<g >
<title>futex_wake (13 samples, 0.01%)</title><rect x="1187.2" y="165" width="0.1" height="15.0" fill="rgb(247,206,12)" rx="2" ry="2" />
<text  x="1190.16" y="175.5" ></text>
</g>
<g >
<title>__cpuidle_text_start (30,778 samples, 23.80%)</title><rect x="43.1" y="437" width="280.8" height="15.0" fill="rgb(245,188,46)" rx="2" ry="2" />
<text  x="46.13" y="447.5" >__cpuidle_text_start</text>
</g>
<g >
<title>path_openat (48 samples, 0.04%)</title><rect x="29.8" y="405" width="0.4" height="15.0" fill="rgb(218,2,22)" rx="2" ry="2" />
<text  x="32.79" y="415.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.copyBuffered (318 samples, 0.25%)</title><rect x="12.6" y="229" width="2.9" height="15.0" fill="rgb(217,3,52)" rx="2" ry="2" />
<text  x="15.62" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_fchownat (12 samples, 0.01%)</title><rect x="16.1" y="165" width="0.1" height="15.0" fill="rgb(218,152,43)" rx="2" ry="2" />
<text  x="19.14" y="175.5" ></text>
</g>
<g >
<title>compress/gzip.(*Reader).Read (280 samples, 0.22%)</title><rect x="12.6" y="117" width="2.6" height="15.0" fill="rgb(206,90,40)" rx="2" ry="2" />
<text  x="15.63" y="127.5" ></text>
</g>
<g >
<title>[memlogd] (21 samples, 0.02%)</title><rect x="21.2" y="501" width="0.2" height="15.0" fill="rgb(210,147,49)" rx="2" ry="2" />
<text  x="24.18" y="511.5" ></text>
</g>
<g >
<title>kvm_vcpu_kick (31 samples, 0.02%)</title><rect x="42.2" y="293" width="0.3" height="15.0" fill="rgb(253,147,26)" rx="2" ry="2" />
<text  x="45.19" y="303.5" ></text>
</g>
<g >
<title>[newlogd] (33 samples, 0.03%)</title><rect x="21.5" y="421" width="0.4" height="15.0" fill="rgb(216,103,42)" rx="2" ry="2" />
<text  x="24.55" y="431.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff/walking/plugin.(*diffPlugin).Apply (446 samples, 0.34%)</title><rect x="12.5" y="357" width="4.1" height="15.0" fill="rgb(230,151,27)" rx="2" ry="2" />
<text  x="15.50" y="367.5" ></text>
</g>
<g >
<title>[zedbox] (628 samples, 0.49%)</title><rect x="1183.1" y="341" width="5.8" height="15.0" fill="rgb(207,191,51)" rx="2" ry="2" />
<text  x="1186.12" y="351.5" ></text>
</g>
<g >
<title>zfs_create (11 samples, 0.01%)</title><rect x="30.1" y="373" width="0.1" height="15.0" fill="rgb(229,161,9)" rx="2" ry="2" />
<text  x="33.13" y="383.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/github.com/containerd/continuity/fs.walkLinks (13 samples, 0.01%)</title><rect x="16.3" y="229" width="0.1" height="15.0" fill="rgb(254,13,30)" rx="2" ry="2" />
<text  x="19.30" y="239.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.applyNaive (436 samples, 0.34%)</title><rect x="12.5" y="261" width="4.0" height="15.0" fill="rgb(217,182,31)" rx="2" ry="2" />
<text  x="15.50" y="271.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (12 samples, 0.01%)</title><rect x="22.6" y="325" width="0.1" height="15.0" fill="rgb(207,174,37)" rx="2" ry="2" />
<text  x="25.63" y="335.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (41 samples, 0.03%)</title><rect x="324.0" y="373" width="0.4" height="15.0" fill="rgb(253,109,32)" rx="2" ry="2" />
<text  x="327.04" y="383.5" ></text>
</g>
<g >
<title>worker_thread (51 samples, 0.04%)</title><rect x="20.6" y="469" width="0.5" height="15.0" fill="rgb(241,221,4)" rx="2" ry="2" />
<text  x="23.64" y="479.5" ></text>
</g>
<g >
<title>[memlogd] (20 samples, 0.02%)</title><rect x="21.2" y="437" width="0.2" height="15.0" fill="rgb(249,193,41)" rx="2" ry="2" />
<text  x="24.19" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (21 samples, 0.02%)</title><rect x="1188.6" y="309" width="0.2" height="15.0" fill="rgb(222,58,16)" rx="2" ry="2" />
<text  x="1191.64" y="319.5" ></text>
</g>
<g >
<title>zpl_getattr (11 samples, 0.01%)</title><rect x="33.3" y="389" width="0.1" height="15.0" fill="rgb(246,159,47)" rx="2" ry="2" />
<text  x="36.28" y="399.5" ></text>
</g>
<g >
<title>__raw_spin_unlock_irq (17 samples, 0.01%)</title><rect x="28.9" y="325" width="0.2" height="15.0" fill="rgb(214,152,20)" rx="2" ry="2" />
<text  x="31.90" y="335.5" ></text>
</g>
<g >
<title>kthread (85 samples, 0.07%)</title><rect x="1178.3" y="485" width="0.8" height="15.0" fill="rgb(208,94,53)" rx="2" ry="2" />
<text  x="1181.33" y="495.5" ></text>
</g>
<g >
<title>__raw_spin_unlock_irq (41 samples, 0.03%)</title><rect x="324.0" y="389" width="0.4" height="15.0" fill="rgb(243,167,8)" rx="2" ry="2" />
<text  x="327.04" y="399.5" ></text>
</g>
<g >
<title>kvm_lapic_sync_from_vapic (11 samples, 0.01%)</title><rect x="36.0" y="357" width="0.1" height="15.0" fill="rgb(242,207,39)" rx="2" ry="2" />
<text  x="39.05" y="367.5" ></text>
</g>
<g >
<title>kthreadd (17 samples, 0.01%)</title><rect x="20.4" y="485" width="0.1" height="15.0" fill="rgb(245,23,47)" rx="2" ry="2" />
<text  x="23.38" y="495.5" ></text>
</g>
<g >
<title>__srcu_read_unlock (26 samples, 0.02%)</title><rect x="38.2" y="325" width="0.2" height="15.0" fill="rgb(229,95,33)" rx="2" ry="2" />
<text  x="41.16" y="335.5" ></text>
</g>
<g >
<title>crypto/sha256.block (108 samples, 0.08%)</title><rect x="11.0" y="485" width="1.0" height="15.0" fill="rgb(243,53,43)" rx="2" ry="2" />
<text  x="13.99" y="495.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (11 samples, 0.01%)</title><rect x="10.4" y="469" width="0.1" height="15.0" fill="rgb(216,181,7)" rx="2" ry="2" />
<text  x="13.37" y="479.5" ></text>
</g>
<g >
<title>kworker/1:2-eve (51 samples, 0.04%)</title><rect x="20.6" y="517" width="0.5" height="15.0" fill="rgb(240,107,14)" rx="2" ry="2" />
<text  x="23.64" y="527.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/services/diff.(*service).Apply (446 samples, 0.34%)</title><rect x="12.5" y="389" width="4.1" height="15.0" fill="rgb(242,93,54)" rx="2" ry="2" />
<text  x="15.50" y="399.5" ></text>
</g>
<g >
<title>ksys_ioctl (875 samples, 0.68%)</title><rect x="34.5" y="437" width="8.0" height="15.0" fill="rgb(232,124,17)" rx="2" ry="2" />
<text  x="37.51" y="447.5" ></text>
</g>
<g >
<title>__sched_text_start (12 samples, 0.01%)</title><rect x="22.6" y="373" width="0.1" height="15.0" fill="rgb(224,114,0)" rx="2" ry="2" />
<text  x="25.63" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (28 samples, 0.02%)</title><rect x="17.7" y="485" width="0.2" height="15.0" fill="rgb(216,131,35)" rx="2" ry="2" />
<text  x="20.66" y="495.5" ></text>
</g>
<g >
<title>do_vfs_ioctl (874 samples, 0.68%)</title><rect x="34.5" y="421" width="8.0" height="15.0" fill="rgb(205,119,39)" rx="2" ry="2" />
<text  x="37.52" y="431.5" ></text>
</g>
<g >
<title>[unknown] (28 samples, 0.02%)</title><rect x="32.9" y="469" width="0.3" height="15.0" fill="rgb(225,71,2)" rx="2" ry="2" />
<text  x="35.94" y="479.5" ></text>
</g>
<g >
<title>schedule (17 samples, 0.01%)</title><rect x="28.9" y="373" width="0.2" height="15.0" fill="rgb(219,81,43)" rx="2" ry="2" />
<text  x="31.90" y="383.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/services/diff.(*local).Apply (446 samples, 0.34%)</title><rect x="12.5" y="373" width="4.1" height="15.0" fill="rgb(225,122,36)" rx="2" ry="2" />
<text  x="15.50" y="383.5" ></text>
</g>
<g >
<title>[zedbox] (43 samples, 0.03%)</title><rect x="1186.5" y="165" width="0.4" height="15.0" fill="rgb(237,217,49)" rx="2" ry="2" />
<text  x="1189.51" y="175.5" ></text>
</g>
<g >
<title>do_IRQ (54 samples, 0.04%)</title><rect x="1174.8" y="389" width="0.5" height="15.0" fill="rgb(220,151,24)" rx="2" ry="2" />
<text  x="1177.78" y="399.5" ></text>
</g>
<g >
<title>kvm_arch_vcpu_ioctl_run (833 samples, 0.64%)</title><rect x="34.5" y="373" width="7.6" height="15.0" fill="rgb(215,49,27)" rx="2" ry="2" />
<text  x="37.54" y="383.5" ></text>
</g>
<g >
<title>taskq_thread (19 samples, 0.01%)</title><rect x="18.0" y="469" width="0.1" height="15.0" fill="rgb(229,174,9)" rx="2" ry="2" />
<text  x="20.96" y="479.5" ></text>
</g>
<g >
<title>__sched_text_start (54 samples, 0.04%)</title><rect x="41.0" y="325" width="0.5" height="15.0" fill="rgb(213,28,17)" rx="2" ry="2" />
<text  x="44.05" y="335.5" ></text>
</g>
<g >
<title>dmu_read_uio_dbuf (12 samples, 0.01%)</title><rect x="32.9" y="293" width="0.2" height="15.0" fill="rgb(218,30,9)" rx="2" ry="2" />
<text  x="35.94" y="303.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/services/content/contentserver.(*service).Write (21 samples, 0.02%)</title><rect x="12.3" y="405" width="0.2" height="15.0" fill="rgb(220,102,11)" rx="2" ry="2" />
<text  x="15.29" y="415.5" ></text>
</g>
<g >
<title>schedule (55 samples, 0.04%)</title><rect x="41.0" y="341" width="0.5" height="15.0" fill="rgb(216,49,21)" rx="2" ry="2" />
<text  x="44.04" y="351.5" ></text>
</g>
<g >
<title>abd_iterate_func2 (22 samples, 0.02%)</title><rect x="1177.8" y="373" width="0.2" height="15.0" fill="rgb(235,198,3)" rx="2" ry="2" />
<text  x="1180.83" y="383.5" ></text>
</g>
<g >
<title>_do_fork (17 samples, 0.01%)</title><rect x="20.4" y="453" width="0.1" height="15.0" fill="rgb(250,0,53)" rx="2" ry="2" />
<text  x="23.38" y="463.5" ></text>
</g>
<g >
<title>zfs_read (16 samples, 0.01%)</title><rect x="32.9" y="309" width="0.2" height="15.0" fill="rgb(246,90,42)" rx="2" ry="2" />
<text  x="35.94" y="319.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc.(*serverStream).RecvMsg (11 samples, 0.01%)</title><rect x="12.3" y="357" width="0.1" height="15.0" fill="rgb(222,10,36)" rx="2" ry="2" />
<text  x="15.29" y="367.5" ></text>
</g>
<g >
<title>do_futex (56 samples, 0.04%)</title><rect x="33.7" y="421" width="0.5" height="15.0" fill="rgb(227,94,31)" rx="2" ry="2" />
<text  x="36.71" y="431.5" ></text>
</g>
<g >
<title>walk_component (11 samples, 0.01%)</title><rect x="30.0" y="373" width="0.1" height="15.0" fill="rgb(205,147,53)" rx="2" ry="2" />
<text  x="33.02" y="383.5" ></text>
</g>
<g >
<title>copy_process (13 samples, 0.01%)</title><rect x="20.4" y="437" width="0.1" height="15.0" fill="rgb(236,159,35)" rx="2" ry="2" />
<text  x="23.38" y="447.5" ></text>
</g>
<g >
<title>start_kernel (30,838 samples, 23.84%)</title><rect x="43.1" y="485" width="281.3" height="15.0" fill="rgb(212,117,20)" rx="2" ry="2" />
<text  x="46.10" y="495.5" >start_kernel</text>
</g>
<g >
<title>kvm_io_bus_write (57 samples, 0.04%)</title><rect x="34.8" y="341" width="0.5" height="15.0" fill="rgb(245,67,37)" rx="2" ry="2" />
<text  x="37.77" y="351.5" ></text>
</g>
<g >
<title>[zedbox] (411 samples, 0.32%)</title><rect x="1184.6" y="293" width="3.7" height="15.0" fill="rgb(208,170,52)" rx="2" ry="2" />
<text  x="1187.59" y="303.5" ></text>
</g>
<g >
<title>arch_local_irq_restore (36 samples, 0.03%)</title><rect x="35.6" y="181" width="0.3" height="15.0" fill="rgb(230,188,29)" rx="2" ry="2" />
<text  x="38.59" y="191.5" ></text>
</g>
<g >
<title>__srcu_read_lock (31 samples, 0.02%)</title><rect x="37.9" y="325" width="0.3" height="15.0" fill="rgb(230,97,31)" rx="2" ry="2" />
<text  x="40.88" y="335.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).handleRawConn.func1 (15 samples, 0.01%)</title><rect x="12.2" y="485" width="0.1" height="15.0" fill="rgb(248,84,44)" rx="2" ry="2" />
<text  x="15.15" y="495.5" ></text>
</g>
<g >
<title>__do_sys_futex (57 samples, 0.04%)</title><rect x="33.7" y="437" width="0.5" height="15.0" fill="rgb(210,21,53)" rx="2" ry="2" />
<text  x="36.70" y="447.5" ></text>
</g>
<g >
<title>kvm_set_msr_common (48 samples, 0.04%)</title><rect x="35.5" y="309" width="0.5" height="15.0" fill="rgb(252,179,14)" rx="2" ry="2" />
<text  x="38.54" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (17 samples, 0.01%)</title><rect x="1189.0" y="341" width="0.2" height="15.0" fill="rgb(244,14,49)" rx="2" ry="2" />
<text  x="1192.04" y="351.5" ></text>
</g>
<g >
<title>syscall.Syscall (35 samples, 0.03%)</title><rect x="15.2" y="181" width="0.3" height="15.0" fill="rgb(247,211,27)" rx="2" ry="2" />
<text  x="18.19" y="191.5" ></text>
</g>
<g >
<title>kthread (51 samples, 0.04%)</title><rect x="20.6" y="485" width="0.5" height="15.0" fill="rgb(236,94,52)" rx="2" ry="2" />
<text  x="23.64" y="495.5" ></text>
</g>
<g >
<title>start_secondary (93,409 samples, 72.22%)</title><rect x="324.4" y="485" width="852.2" height="15.0" fill="rgb(239,184,34)" rx="2" ry="2" />
<text  x="327.44" y="495.5" >start_secondary</text>
</g>
<g >
<title>do_syscall_64 (37 samples, 0.03%)</title><rect x="1187.2" y="213" width="0.3" height="15.0" fill="rgb(211,158,22)" rx="2" ry="2" />
<text  x="1190.15" y="223.5" ></text>
</g>
<g >
<title>kthread (108 samples, 0.08%)</title><rect x="1177.3" y="485" width="0.9" height="15.0" fill="rgb(254,48,30)" rx="2" ry="2" />
<text  x="1180.26" y="495.5" ></text>
</g>
<g >
<title>try_to_wake_up (49 samples, 0.04%)</title><rect x="33.8" y="373" width="0.4" height="15.0" fill="rgb(249,83,35)" rx="2" ry="2" />
<text  x="36.77" y="383.5" ></text>
</g>
<g >
<title>__do_sys_futex (37 samples, 0.03%)</title><rect x="22.5" y="453" width="0.4" height="15.0" fill="rgb(233,176,38)" rx="2" ry="2" />
<text  x="25.52" y="463.5" ></text>
</g>
<g >
<title>[zedbox] (99 samples, 0.08%)</title><rect x="1186.2" y="213" width="0.9" height="15.0" fill="rgb(213,161,36)" rx="2" ry="2" />
<text  x="1189.15" y="223.5" ></text>
</g>
<g >
<title>zpl_iter_write (32 samples, 0.02%)</title><rect x="15.2" y="85" width="0.3" height="15.0" fill="rgb(207,44,18)" rx="2" ry="2" />
<text  x="18.21" y="95.5" ></text>
</g>
<g >
<title>vmx_get_cpl (14 samples, 0.01%)</title><rect x="36.6" y="261" width="0.1" height="15.0" fill="rgb(249,88,8)" rx="2" ry="2" />
<text  x="39.61" y="271.5" ></text>
</g>
<g >
<title>kvm_cpu_has_interrupt (71 samples, 0.05%)</title><rect x="39.0" y="309" width="0.6" height="15.0" fill="rgb(246,130,3)" rx="2" ry="2" />
<text  x="41.99" y="319.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff/apply.(*fsApplier).Apply (446 samples, 0.34%)</title><rect x="12.5" y="341" width="4.1" height="15.0" fill="rgb(208,178,26)" rx="2" ry="2" />
<text  x="15.50" y="351.5" ></text>
</g>
<g >
<title>finish_task_switch (54 samples, 0.04%)</title><rect x="41.0" y="309" width="0.5" height="15.0" fill="rgb(233,20,14)" rx="2" ry="2" />
<text  x="44.05" y="319.5" ></text>
</g>
<g >
<title>[zedbox] (32 samples, 0.02%)</title><rect x="1179.3" y="437" width="0.3" height="15.0" fill="rgb(234,15,18)" rx="2" ry="2" />
<text  x="1182.28" y="447.5" ></text>
</g>
<g >
<title>[ld-musl-x86_64.so.1] (811 samples, 0.63%)</title><rect x="23.7" y="485" width="7.4" height="15.0" fill="rgb(205,215,23)" rx="2" ry="2" />
<text  x="26.68" y="495.5" ></text>
</g>
<g >
<title>vfs_read (20 samples, 0.02%)</title><rect x="1187.9" y="213" width="0.2" height="15.0" fill="rgb(215,214,12)" rx="2" ry="2" />
<text  x="1190.92" y="223.5" ></text>
</g>
<g >
<title>[zedbox] (135 samples, 0.10%)</title><rect x="1185.9" y="229" width="1.3" height="15.0" fill="rgb(223,176,24)" rx="2" ry="2" />
<text  x="1188.92" y="239.5" ></text>
</g>
<g >
<title>[zedbox] (32 samples, 0.02%)</title><rect x="1179.3" y="469" width="0.3" height="15.0" fill="rgb(223,151,41)" rx="2" ry="2" />
<text  x="1182.28" y="479.5" ></text>
</g>
<g >
<title>scsi_io_completion (11 samples, 0.01%)</title><rect x="1174.9" y="325" width="0.1" height="15.0" fill="rgb(226,212,46)" rx="2" ry="2" />
<text  x="1177.89" y="335.5" ></text>
</g>
<g >
<title>containerd (718 samples, 0.56%)</title><rect x="10.3" y="517" width="6.5" height="15.0" fill="rgb(244,151,38)" rx="2" ry="2" />
<text  x="13.26" y="527.5" ></text>
</g>
<g >
<title>iptables (19 samples, 0.01%)</title><rect x="18.3" y="517" width="0.2" height="15.0" fill="rgb(245,117,50)" rx="2" ry="2" />
<text  x="21.32" y="527.5" ></text>
</g>
<g >
<title>cpu_startup_entry (93,409 samples, 72.22%)</title><rect x="324.4" y="469" width="852.2" height="15.0" fill="rgb(249,198,1)" rx="2" ry="2" />
<text  x="327.44" y="479.5" >cpu_startup_entry</text>
</g>
<g >
<title>compress/flate.(*decompressor).huffmanBlock (137 samples, 0.11%)</title><rect x="12.7" y="85" width="1.3" height="15.0" fill="rgb(216,192,11)" rx="2" ry="2" />
<text  x="15.75" y="95.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (24 samples, 0.02%)</title><rect x="10.6" y="453" width="0.2" height="15.0" fill="rgb(248,55,38)" rx="2" ry="2" />
<text  x="13.62" y="463.5" ></text>
</g>
<g >
<title>taskq_thread (102 samples, 0.08%)</title><rect x="1177.3" y="469" width="0.9" height="15.0" fill="rgb(224,0,45)" rx="2" ry="2" />
<text  x="1180.31" y="479.5" ></text>
</g>
<g >
<title>ksys_read (21 samples, 0.02%)</title><rect x="1187.9" y="229" width="0.2" height="15.0" fill="rgb(213,21,19)" rx="2" ry="2" />
<text  x="1190.91" y="239.5" ></text>
</g>
<g >
<title>kthread (19 samples, 0.01%)</title><rect x="18.0" y="485" width="0.1" height="15.0" fill="rgb(221,185,20)" rx="2" ry="2" />
<text  x="20.96" y="495.5" ></text>
</g>
<g >
<title>do_filp_open (32 samples, 0.02%)</title><rect x="15.7" y="117" width="0.3" height="15.0" fill="rgb(246,170,6)" rx="2" ry="2" />
<text  x="18.71" y="127.5" ></text>
</g>
<g >
<title>vmx_prepare_switch_to_guest (23 samples, 0.02%)</title><rect x="41.9" y="357" width="0.2" height="15.0" fill="rgb(205,138,13)" rx="2" ry="2" />
<text  x="44.93" y="367.5" ></text>
</g>
<g >
<title>[zedbox] (32 samples, 0.02%)</title><rect x="1179.3" y="421" width="0.3" height="15.0" fill="rgb(243,46,52)" rx="2" ry="2" />
<text  x="1182.28" y="431.5" ></text>
</g>
<g >
<title>[zedbox] (681 samples, 0.53%)</title><rect x="1182.8" y="357" width="6.2" height="15.0" fill="rgb(205,216,53)" rx="2" ry="2" />
<text  x="1185.83" y="367.5" ></text>
</g>
<g >
<title>thread_generic_wrapper (21 samples, 0.02%)</title><rect x="1176.7" y="469" width="0.2" height="15.0" fill="rgb(214,168,24)" rx="2" ry="2" />
<text  x="1179.74" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.01%)</title><rect x="1189.2" y="373" width="0.1" height="15.0" fill="rgb(208,66,5)" rx="2" ry="2" />
<text  x="1192.20" y="383.5" ></text>
</g>
<g >
<title>[zedbox] (13 samples, 0.01%)</title><rect x="1179.3" y="389" width="0.1" height="15.0" fill="rgb(210,182,45)" rx="2" ry="2" />
<text  x="1182.31" y="399.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/api/services/content/v1.(*contentWriteServer).Recv (11 samples, 0.01%)</title><rect x="12.3" y="389" width="0.1" height="15.0" fill="rgb(234,75,0)" rx="2" ry="2" />
<text  x="15.29" y="399.5" ></text>
</g>
<g >
<title>do_sys_open (33 samples, 0.03%)</title><rect x="15.7" y="133" width="0.3" height="15.0" fill="rgb(221,142,49)" rx="2" ry="2" />
<text  x="18.71" y="143.5" ></text>
</g>
<g >
<title>kvm_vcpu_kick (38 samples, 0.03%)</title><rect x="35.6" y="229" width="0.3" height="15.0" fill="rgb(234,95,10)" rx="2" ry="2" />
<text  x="38.57" y="239.5" ></text>
</g>
<g >
<title>skip_emulated_instruction (47 samples, 0.04%)</title><rect x="36.3" y="341" width="0.5" height="15.0" fill="rgb(229,78,4)" rx="2" ry="2" />
<text  x="39.33" y="351.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/golang.org/x/net/http2.(*Framer).ReadFrame (13 samples, 0.01%)</title><rect x="12.2" y="437" width="0.1" height="15.0" fill="rgb(238,195,25)" rx="2" ry="2" />
<text  x="15.15" y="447.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (13 samples, 0.01%)</title><rect x="1174.6" y="389" width="0.1" height="15.0" fill="rgb(241,95,41)" rx="2" ry="2" />
<text  x="1177.61" y="399.5" ></text>
</g>
<g >
<title>kvm_send_userspace_msi (36 samples, 0.03%)</title><rect x="42.1" y="373" width="0.4" height="15.0" fill="rgb(241,99,36)" rx="2" ry="2" />
<text  x="45.15" y="383.5" ></text>
</g>
<g >
<title>__do_sys_futex (13 samples, 0.01%)</title><rect x="1187.2" y="197" width="0.1" height="15.0" fill="rgb(224,70,52)" rx="2" ry="2" />
<text  x="1190.16" y="207.5" ></text>
</g>
<g >
<title>ret_from_fork (85 samples, 0.07%)</title><rect x="1178.3" y="501" width="0.8" height="15.0" fill="rgb(215,57,0)" rx="2" ry="2" />
<text  x="1181.33" y="511.5" ></text>
</g>
<g >
<title>kvm_apic_has_interrupt (38 samples, 0.03%)</title><rect x="39.1" y="293" width="0.3" height="15.0" fill="rgb(211,201,14)" rx="2" ry="2" />
<text  x="42.10" y="303.5" ></text>
</g>
<g >
<title>vfs_write (47 samples, 0.04%)</title><rect x="30.5" y="421" width="0.4" height="15.0" fill="rgb(245,225,40)" rx="2" ry="2" />
<text  x="33.48" y="431.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/mount.WithTempMount (445 samples, 0.34%)</title><rect x="12.5" y="309" width="4.1" height="15.0" fill="rgb(221,186,23)" rx="2" ry="2" />
<text  x="15.50" y="319.5" ></text>
</g>
<g >
<title>do_preadv (17 samples, 0.01%)</title><rect x="32.9" y="405" width="0.2" height="15.0" fill="rgb(232,30,38)" rx="2" ry="2" />
<text  x="35.94" y="415.5" ></text>
</g>
<g >
<title>kvm_vcpu_ioctl (833 samples, 0.64%)</title><rect x="34.5" y="389" width="7.6" height="15.0" fill="rgb(212,34,5)" rx="2" ry="2" />
<text  x="37.54" y="399.5" ></text>
</g>
<g >
<title>[memlogd] (17 samples, 0.01%)</title><rect x="21.2" y="373" width="0.2" height="15.0" fill="rgb(244,30,18)" rx="2" ry="2" />
<text  x="24.22" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.01%)</title><rect x="16.1" y="197" width="0.1" height="15.0" fill="rgb(243,102,14)" rx="2" ry="2" />
<text  x="19.14" y="207.5" ></text>
</g>
<g >
<title>zio_nowait (12 samples, 0.01%)</title><rect x="1178.1" y="405" width="0.1" height="15.0" fill="rgb(213,24,47)" rx="2" ry="2" />
<text  x="1181.11" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (19 samples, 0.01%)</title><rect x="1189.7" y="437" width="0.2" height="15.0" fill="rgb(247,165,10)" rx="2" ry="2" />
<text  x="1192.74" y="447.5" ></text>
</g>
<g >
<title>[newlogd] (37 samples, 0.03%)</title><rect x="21.5" y="469" width="0.4" height="15.0" fill="rgb(229,194,26)" rx="2" ry="2" />
<text  x="24.52" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (14 samples, 0.01%)</title><rect x="1187.5" y="229" width="0.1" height="15.0" fill="rgb(254,227,25)" rx="2" ry="2" />
<text  x="1190.50" y="239.5" ></text>
</g>
<g >
<title>os.(*File).Write (36 samples, 0.03%)</title><rect x="15.2" y="213" width="0.3" height="15.0" fill="rgb(226,184,35)" rx="2" ry="2" />
<text  x="18.18" y="223.5" ></text>
</g>
<g >
<title>arch_local_irq_restore (63 samples, 0.05%)</title><rect x="27.1" y="373" width="0.6" height="15.0" fill="rgb(223,69,24)" rx="2" ry="2" />
<text  x="30.08" y="383.5" ></text>
</g>
<g >
<title>__raw_spin_unlock_irq (105 samples, 0.08%)</title><rect x="1175.6" y="389" width="1.0" height="15.0" fill="rgb(220,38,36)" rx="2" ry="2" />
<text  x="1178.65" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (12 samples, 0.01%)</title><rect x="16.1" y="181" width="0.1" height="15.0" fill="rgb(231,58,41)" rx="2" ry="2" />
<text  x="19.14" y="191.5" ></text>
</g>
<g >
<title>dp_sync_taskq (20 samples, 0.02%)</title><rect x="18.0" y="517" width="0.1" height="15.0" fill="rgb(253,201,42)" rx="2" ry="2" />
<text  x="20.96" y="527.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/gc/scheduler.(*gcScheduler).run (12 samples, 0.01%)</title><rect x="12.0" y="485" width="0.1" height="15.0" fill="rgb(251,25,26)" rx="2" ry="2" />
<text  x="15.00" y="495.5" ></text>
</g>
<g >
<title>kvm_vcpu_check_block (353 samples, 0.27%)</title><rect x="37.8" y="341" width="3.2" height="15.0" fill="rgb(229,85,54)" rx="2" ry="2" />
<text  x="40.82" y="351.5" ></text>
</g>
<g >
<title>napi_gro_receive (26 samples, 0.02%)</title><rect x="1175.0" y="293" width="0.2" height="15.0" fill="rgb(220,95,13)" rx="2" ry="2" />
<text  x="1178.00" y="303.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (66 samples, 0.05%)</title><rect x="27.1" y="389" width="0.6" height="15.0" fill="rgb(250,23,7)" rx="2" ry="2" />
<text  x="30.05" y="399.5" ></text>
</g>
<g >
<title>do_idle (93,409 samples, 72.22%)</title><rect x="324.4" y="453" width="852.2" height="15.0" fill="rgb(225,18,34)" rx="2" ry="2" />
<text  x="327.44" y="463.5" >do_idle</text>
</g>
<g >
<title>paravirt_read_msr (29 samples, 0.02%)</title><rect x="41.2" y="261" width="0.3" height="15.0" fill="rgb(222,109,44)" rx="2" ry="2" />
<text  x="44.21" y="271.5" ></text>
</g>
<g >
<title>ioctl (19 samples, 0.01%)</title><rect x="1189.7" y="485" width="0.2" height="15.0" fill="rgb(218,114,49)" rx="2" ry="2" />
<text  x="1192.74" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (33 samples, 0.03%)</title><rect x="15.7" y="165" width="0.3" height="15.0" fill="rgb(241,19,3)" rx="2" ry="2" />
<text  x="18.71" y="175.5" ></text>
</g>
<g >
<title>[zedbox] (972 samples, 0.75%)</title><rect x="1180.7" y="437" width="8.8" height="15.0" fill="rgb(208,131,43)" rx="2" ry="2" />
<text  x="1183.68" y="447.5" ></text>
</g>
<g >
<title>vdev_queue_io_done (48 samples, 0.04%)</title><rect x="1177.8" y="421" width="0.4" height="15.0" fill="rgb(226,195,5)" rx="2" ry="2" />
<text  x="1180.78" y="431.5" ></text>
</g>
<g >
<title>[unknown] (62 samples, 0.05%)</title><rect x="19.6" y="501" width="0.6" height="15.0" fill="rgb(228,134,25)" rx="2" ry="2" />
<text  x="22.61" y="511.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc.recv (11 samples, 0.01%)</title><rect x="12.3" y="341" width="0.1" height="15.0" fill="rgb(252,121,11)" rx="2" ry="2" />
<text  x="15.29" y="351.5" ></text>
</g>
<g >
<title>arch_local_irq_restore (49 samples, 0.04%)</title><rect x="33.8" y="341" width="0.4" height="15.0" fill="rgb(220,160,24)" rx="2" ry="2" />
<text  x="36.77" y="351.5" ></text>
</g>
<g >
<title>do_futex (13 samples, 0.01%)</title><rect x="1187.2" y="181" width="0.1" height="15.0" fill="rgb(251,202,1)" rx="2" ry="2" />
<text  x="1190.16" y="191.5" ></text>
</g>
<g >
<title>kernel_thread (17 samples, 0.01%)</title><rect x="20.4" y="469" width="0.1" height="15.0" fill="rgb(207,77,38)" rx="2" ry="2" />
<text  x="23.38" y="479.5" ></text>
</g>
<g >
<title>arch_local_irq_restore (53 samples, 0.04%)</title><rect x="34.8" y="261" width="0.5" height="15.0" fill="rgb(208,26,28)" rx="2" ry="2" />
<text  x="37.79" y="271.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc/internal/transport.(*http2Server).HandleStreams (15 samples, 0.01%)</title><rect x="12.2" y="453" width="0.1" height="15.0" fill="rgb(249,163,3)" rx="2" ry="2" />
<text  x="15.15" y="463.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/api/services/diff/v1._Diff_Apply_Handler (446 samples, 0.34%)</title><rect x="12.5" y="437" width="4.1" height="15.0" fill="rgb(224,33,46)" rx="2" ry="2" />
<text  x="15.50" y="447.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/api/services/content/v1._Content_Write_Handler (21 samples, 0.02%)</title><rect x="12.3" y="421" width="0.2" height="15.0" fill="rgb(207,168,44)" rx="2" ry="2" />
<text  x="15.29" y="431.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff/apply.(*readCounter).Read (281 samples, 0.22%)</title><rect x="12.6" y="181" width="2.6" height="15.0" fill="rgb(210,54,18)" rx="2" ry="2" />
<text  x="15.62" y="191.5" ></text>
</g>
<g >
<title>archive/tar.(*Reader).Read (281 samples, 0.22%)</title><rect x="12.6" y="213" width="2.6" height="15.0" fill="rgb(237,136,18)" rx="2" ry="2" />
<text  x="15.62" y="223.5" ></text>
</g>
<g >
<title>runtime.goexit (528 samples, 0.41%)</title><rect x="12.0" y="501" width="4.8" height="15.0" fill="rgb(251,172,53)" rx="2" ry="2" />
<text  x="15.00" y="511.5" ></text>
</g>
<g >
<title>blk_done_softirq (11 samples, 0.01%)</title><rect x="1174.9" y="341" width="0.1" height="15.0" fill="rgb(219,129,15)" rx="2" ry="2" />
<text  x="1177.89" y="351.5" ></text>
</g>
<g >
<title>apic_enabled (16 samples, 0.01%)</title><rect x="38.5" y="309" width="0.1" height="15.0" fill="rgb(240,217,16)" rx="2" ry="2" />
<text  x="41.47" y="319.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).huffSym (54 samples, 0.04%)</title><rect x="14.4" y="53" width="0.5" height="15.0" fill="rgb(230,59,54)" rx="2" ry="2" />
<text  x="17.38" y="63.5" ></text>
</g>
<g >
<title>zio_vdev_io_start (23 samples, 0.02%)</title><rect x="1178.8" y="437" width="0.2" height="15.0" fill="rgb(230,68,9)" rx="2" ry="2" />
<text  x="1181.75" y="447.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (13 samples, 0.01%)</title><rect x="1187.2" y="117" width="0.1" height="15.0" fill="rgb(238,170,30)" rx="2" ry="2" />
<text  x="1190.16" y="127.5" ></text>
</g>
<g >
<title>[unknown] (93 samples, 0.07%)</title><rect x="32.6" y="485" width="0.8" height="15.0" fill="rgb(214,134,24)" rx="2" ry="2" />
<text  x="35.59" y="495.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (19 samples, 0.01%)</title><rect x="22.6" y="405" width="0.1" height="15.0" fill="rgb(253,95,2)" rx="2" ry="2" />
<text  x="25.56" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (70 samples, 0.05%)</title><rect x="22.5" y="469" width="0.7" height="15.0" fill="rgb(221,97,31)" rx="2" ry="2" />
<text  x="25.52" y="479.5" ></text>
</g>
<g >
<title>__cpuidle_text_start (93,260 samples, 72.10%)</title><rect x="324.5" y="437" width="850.8" height="15.0" fill="rgb(227,144,40)" rx="2" ry="2" />
<text  x="327.46" y="447.5" >__cpuidle_text_start</text>
</g>
<g >
<title>__raw_spin_unlock_irq (44 samples, 0.03%)</title><rect x="30.5" y="389" width="0.4" height="15.0" fill="rgb(208,0,12)" rx="2" ry="2" />
<text  x="33.49" y="399.5" ></text>
</g>
<g >
<title>bufio.(*Reader).ReadByte (14 samples, 0.01%)</title><rect x="14.7" y="37" width="0.2" height="15.0" fill="rgb(216,139,13)" rx="2" ry="2" />
<text  x="17.74" y="47.5" ></text>
</g>
<g >
<title>[zedbox] (259 samples, 0.20%)</title><rect x="1185.3" y="261" width="2.3" height="15.0" fill="rgb(216,199,6)" rx="2" ry="2" />
<text  x="1188.27" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (24 samples, 0.02%)</title><rect x="1188.1" y="261" width="0.2" height="15.0" fill="rgb(231,229,14)" rx="2" ry="2" />
<text  x="1191.12" y="271.5" ></text>
</g>
<g >
<title>[unknown] (33 samples, 0.03%)</title><rect x="1189.6" y="501" width="0.3" height="15.0" fill="rgb(241,51,5)" rx="2" ry="2" />
<text  x="1192.63" y="511.5" ></text>
</g>
<g >
<title>[zedbox] (989 samples, 0.76%)</title><rect x="1180.5" y="453" width="9.1" height="15.0" fill="rgb(240,141,22)" rx="2" ry="2" />
<text  x="1183.53" y="463.5" ></text>
</g>
<g >
<title>single_task_running (16 samples, 0.01%)</title><rect x="41.5" y="341" width="0.2" height="15.0" fill="rgb(209,131,1)" rx="2" ry="2" />
<text  x="44.54" y="351.5" ></text>
</g>
<g >
<title>alloc_empty_file (11 samples, 0.01%)</title><rect x="29.8" y="389" width="0.1" height="15.0" fill="rgb(228,14,18)" rx="2" ry="2" />
<text  x="32.80" y="399.5" ></text>
</g>
<g >
<title>runtime.scanobject (18 samples, 0.01%)</title><rect x="10.7" y="421" width="0.1" height="15.0" fill="rgb(205,122,3)" rx="2" ry="2" />
<text  x="13.68" y="431.5" ></text>
</g>
<g >
<title>irq_exit (54 samples, 0.04%)</title><rect x="1174.8" y="373" width="0.5" height="15.0" fill="rgb(254,122,10)" rx="2" ry="2" />
<text  x="1177.78" y="383.5" ></text>
</g>
<g >
<title>apic_has_pending_timer (24 samples, 0.02%)</title><rect x="38.4" y="325" width="0.2" height="15.0" fill="rgb(230,176,8)" rx="2" ry="2" />
<text  x="41.40" y="335.5" ></text>
</g>
<g >
<title>abd_copy_from_buf_off_cb (14 samples, 0.01%)</title><rect x="1178.5" y="373" width="0.2" height="15.0" fill="rgb(235,30,27)" rx="2" ry="2" />
<text  x="1181.52" y="383.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (47 samples, 0.04%)</title><rect x="28.1" y="389" width="0.4" height="15.0" fill="rgb(212,65,17)" rx="2" ry="2" />
<text  x="31.12" y="399.5" ></text>
</g>
<g >
<title>all (129,342 samples, 100%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(244,50,4)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>dbuf_write_done (11 samples, 0.01%)</title><rect x="1177.4" y="405" width="0.1" height="15.0" fill="rgb(250,54,10)" rx="2" ry="2" />
<text  x="1180.45" y="415.5" ></text>
</g>
<g >
<title>[zedbox] (19 samples, 0.01%)</title><rect x="1186.7" y="133" width="0.2" height="15.0" fill="rgb(221,132,46)" rx="2" ry="2" />
<text  x="1189.68" y="143.5" ></text>
</g>
<g >
<title>do_syscall_64 (16 samples, 0.01%)</title><rect x="1179.4" y="373" width="0.2" height="15.0" fill="rgb(238,220,52)" rx="2" ry="2" />
<text  x="1182.43" y="383.5" ></text>
</g>
<g >
<title>kvm_vcpu_wake_up (38 samples, 0.03%)</title><rect x="35.6" y="213" width="0.3" height="15.0" fill="rgb(251,87,13)" rx="2" ry="2" />
<text  x="38.57" y="223.5" ></text>
</g>
<g >
<title>arc_write_done (13 samples, 0.01%)</title><rect x="1177.4" y="421" width="0.1" height="15.0" fill="rgb(247,116,21)" rx="2" ry="2" />
<text  x="1180.43" y="431.5" ></text>
</g>
<g >
<title>arch_local_irq_restore (29 samples, 0.02%)</title><rect x="42.2" y="245" width="0.3" height="15.0" fill="rgb(212,6,28)" rx="2" ry="2" />
<text  x="45.19" y="255.5" ></text>
</g>
<g >
<title>ret_from_fork (19 samples, 0.01%)</title><rect x="18.0" y="501" width="0.1" height="15.0" fill="rgb(238,38,2)" rx="2" ry="2" />
<text  x="20.96" y="511.5" ></text>
</g>
<g >
<title>zio_vdev_io_done (50 samples, 0.04%)</title><rect x="1177.8" y="437" width="0.4" height="15.0" fill="rgb(214,170,11)" rx="2" ry="2" />
<text  x="1180.78" y="447.5" ></text>
</g>
<g >
<title>__alloc_file (11 samples, 0.01%)</title><rect x="29.8" y="373" width="0.1" height="15.0" fill="rgb(244,149,49)" rx="2" ry="2" />
<text  x="32.80" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (17 samples, 0.01%)</title><rect x="1189.0" y="357" width="0.2" height="15.0" fill="rgb(228,7,48)" rx="2" ry="2" />
<text  x="1192.04" y="367.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff/apply.apply (445 samples, 0.34%)</title><rect x="12.5" y="325" width="4.1" height="15.0" fill="rgb(211,156,8)" rx="2" ry="2" />
<text  x="15.50" y="335.5" ></text>
</g>
<g >
<title>ioctl (897 samples, 0.69%)</title><rect x="34.4" y="501" width="8.2" height="15.0" fill="rgb(219,175,6)" rx="2" ry="2" />
<text  x="37.39" y="511.5" ></text>
</g>
<g >
<title>arch_local_irq_restore (46 samples, 0.04%)</title><rect x="28.1" y="373" width="0.4" height="15.0" fill="rgb(206,113,35)" rx="2" ry="2" />
<text  x="31.13" y="383.5" ></text>
</g>
<g >
<title>vfs_readv (17 samples, 0.01%)</title><rect x="32.9" y="389" width="0.2" height="15.0" fill="rgb(238,80,25)" rx="2" ry="2" />
<text  x="35.94" y="399.5" ></text>
</g>
<g >
<title>[qemu-system-x86_64] (45 samples, 0.03%)</title><rect x="23.3" y="501" width="0.4" height="15.0" fill="rgb(211,29,4)" rx="2" ry="2" />
<text  x="26.26" y="511.5" ></text>
</g>
<g >
<title>__raw_spin_unlock_irq (12 samples, 0.01%)</title><rect x="22.6" y="341" width="0.1" height="15.0" fill="rgb(218,213,44)" rx="2" ry="2" />
<text  x="25.63" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (20 samples, 0.02%)</title><rect x="33.2" y="453" width="0.2" height="15.0" fill="rgb(227,47,31)" rx="2" ry="2" />
<text  x="36.20" y="463.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (17 samples, 0.01%)</title><rect x="32.9" y="357" width="0.2" height="15.0" fill="rgb(242,226,25)" rx="2" ry="2" />
<text  x="35.94" y="367.5" ></text>
</g>
<g >
<title>futex_wake (55 samples, 0.04%)</title><rect x="33.7" y="405" width="0.5" height="15.0" fill="rgb(217,88,31)" rx="2" ry="2" />
<text  x="36.72" y="415.5" ></text>
</g>
<g >
<title>[newlogd] (12 samples, 0.01%)</title><rect x="21.6" y="357" width="0.2" height="15.0" fill="rgb(238,133,25)" rx="2" ry="2" />
<text  x="24.64" y="367.5" ></text>
</g>
<g >
<title>[libglib-2.0.so.0.6400.6] (72 samples, 0.06%)</title><rect x="31.1" y="485" width="0.6" height="15.0" fill="rgb(254,111,13)" rx="2" ry="2" />
<text  x="34.07" y="495.5" ></text>
</g>
<g >
<title>zio_ready (22 samples, 0.02%)</title><rect x="1178.5" y="437" width="0.2" height="15.0" fill="rgb(239,193,37)" rx="2" ry="2" />
<text  x="1181.52" y="447.5" ></text>
</g>
</g>
</svg>
