<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="566.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="549" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="549" > </text>
<g id="frames">
<g >
<title>github.com/containerd/containerd/api/services/diff/v1._Diff_Apply_Handler.func1 (407 samples, 0.32%)</title><rect x="13.0" y="389" width="3.8" height="15.0" fill="rgb(215,179,54)" rx="2" ry="2" />
<text  x="15.97" y="399.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (14 samples, 0.01%)</title><rect x="10.3" y="453" width="0.1" height="15.0" fill="rgb(216,50,43)" rx="2" ry="2" />
<text  x="13.27" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (11 samples, 0.01%)</title><rect x="12.8" y="277" width="0.1" height="15.0" fill="rgb(237,105,25)" rx="2" ry="2" />
<text  x="15.84" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (11 samples, 0.01%)</title><rect x="1189.7" y="341" width="0.2" height="15.0" fill="rgb(205,33,34)" rx="2" ry="2" />
<text  x="1192.75" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.01%)</title><rect x="1189.9" y="373" width="0.1" height="15.0" fill="rgb(239,182,38)" rx="2" ry="2" />
<text  x="1192.85" y="383.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (28 samples, 0.02%)</title><rect x="15.0" y="101" width="0.3" height="15.0" fill="rgb(226,48,35)" rx="2" ry="2" />
<text  x="18.01" y="111.5" ></text>
</g>
<g >
<title>runtime.systemstack (39 samples, 0.03%)</title><rect x="10.6" y="453" width="0.4" height="15.0" fill="rgb(250,8,20)" rx="2" ry="2" />
<text  x="13.62" y="463.5" ></text>
</g>
<g >
<title>[zedbox] (36 samples, 0.03%)</title><rect x="1188.0" y="165" width="0.4" height="15.0" fill="rgb(211,194,22)" rx="2" ry="2" />
<text  x="1191.02" y="175.5" ></text>
</g>
<g >
<title>[unknown] (129 samples, 0.10%)</title><rect x="1181.6" y="485" width="1.2" height="15.0" fill="rgb(215,170,1)" rx="2" ry="2" />
<text  x="1184.57" y="495.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (11 samples, 0.01%)</title><rect x="11.0" y="389" width="0.1" height="15.0" fill="rgb(237,66,34)" rx="2" ry="2" />
<text  x="14.03" y="399.5" ></text>
</g>
<g >
<title>run-qemu.py (15 samples, 0.01%)</title><rect x="22.5" y="501" width="0.1" height="15.0" fill="rgb(254,113,16)" rx="2" ry="2" />
<text  x="25.46" y="511.5" ></text>
</g>
<g >
<title>ksys_write (18 samples, 0.01%)</title><rect x="1189.6" y="309" width="0.1" height="15.0" fill="rgb(247,227,14)" rx="2" ry="2" />
<text  x="1192.58" y="319.5" ></text>
</g>
<g >
<title>generic_perform_write (11 samples, 0.01%)</title><rect x="12.8" y="181" width="0.1" height="15.0" fill="rgb(217,68,4)" rx="2" ry="2" />
<text  x="15.84" y="191.5" ></text>
</g>
<g >
<title>arch_local_irq_restore (22 samples, 0.02%)</title><rect x="309.4" y="277" width="0.2" height="15.0" fill="rgb(230,139,18)" rx="2" ry="2" />
<text  x="312.42" y="287.5" ></text>
</g>
<g >
<title>process_one_work (11 samples, 0.01%)</title><rect x="20.5" y="437" width="0.1" height="15.0" fill="rgb(253,134,0)" rx="2" ry="2" />
<text  x="23.50" y="447.5" ></text>
</g>
<g >
<title>[zedbox] (772 samples, 0.61%)</title><rect x="1182.8" y="485" width="7.2" height="15.0" fill="rgb(223,90,32)" rx="2" ry="2" />
<text  x="1185.77" y="495.5" ></text>
</g>
<g >
<title>start_secondary (93,089 samples, 73.85%)</title><rect x="309.9" y="469" width="871.4" height="15.0" fill="rgb(221,53,2)" rx="2" ry="2" />
<text  x="312.92" y="479.5" >start_secondary</text>
</g>
<g >
<title>new_sync_write (11 samples, 0.01%)</title><rect x="12.8" y="229" width="0.1" height="15.0" fill="rgb(206,56,9)" rx="2" ry="2" />
<text  x="15.84" y="239.5" ></text>
</g>
<g >
<title>[zedbox] (178 samples, 0.14%)</title><rect x="1187.1" y="245" width="1.6" height="15.0" fill="rgb(210,26,22)" rx="2" ry="2" />
<text  x="1190.07" y="255.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff/apply.(*readCounter).Read (200 samples, 0.16%)</title><rect x="13.1" y="197" width="1.9" height="15.0" fill="rgb(210,47,2)" rx="2" ry="2" />
<text  x="16.12" y="207.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff/apply.(*fsApplier).Apply (407 samples, 0.32%)</title><rect x="13.0" y="325" width="3.8" height="15.0" fill="rgb(225,165,43)" rx="2" ry="2" />
<text  x="15.97" y="335.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).nextBlock (84 samples, 0.07%)</title><rect x="14.1" y="101" width="0.8" height="15.0" fill="rgb(214,163,53)" rx="2" ry="2" />
<text  x="17.14" y="111.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/gc/scheduler.(*gcScheduler).run (18 samples, 0.01%)</title><rect x="12.5" y="469" width="0.1" height="15.0" fill="rgb(208,227,20)" rx="2" ry="2" />
<text  x="15.45" y="479.5" ></text>
</g>
<g >
<title>__cpuidle_text_start (93,032 samples, 73.80%)</title><rect x="309.9" y="421" width="870.9" height="15.0" fill="rgb(224,48,7)" rx="2" ry="2" />
<text  x="312.93" y="431.5" >__cpuidle_text_start</text>
</g>
<g >
<title>vp_notify (12 samples, 0.01%)</title><rect x="20.4" y="245" width="0.1" height="15.0" fill="rgb(251,140,29)" rx="2" ry="2" />
<text  x="23.36" y="255.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (95 samples, 0.08%)</title><rect x="1179.9" y="341" width="0.9" height="15.0" fill="rgb(218,79,29)" rx="2" ry="2" />
<text  x="1182.88" y="351.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.applyNaive (279 samples, 0.22%)</title><rect x="13.0" y="277" width="2.6" height="15.0" fill="rgb(235,224,51)" rx="2" ry="2" />
<text  x="15.97" y="287.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).nextBlock (30 samples, 0.02%)</title><rect x="16.1" y="69" width="0.3" height="15.0" fill="rgb(236,225,0)" rx="2" ry="2" />
<text  x="19.08" y="79.5" ></text>
</g>
<g >
<title>do_syscall_64 (12 samples, 0.01%)</title><rect x="10.3" y="405" width="0.1" height="15.0" fill="rgb(207,94,13)" rx="2" ry="2" />
<text  x="13.29" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (21 samples, 0.02%)</title><rect x="17.3" y="453" width="0.2" height="15.0" fill="rgb(223,105,4)" rx="2" ry="2" />
<text  x="20.27" y="463.5" ></text>
</g>
<g >
<title>kjournald2 (49 samples, 0.04%)</title><rect x="17.9" y="453" width="0.4" height="15.0" fill="rgb(225,226,36)" rx="2" ry="2" />
<text  x="20.88" y="463.5" ></text>
</g>
<g >
<title>do_idle (30,669 samples, 24.33%)</title><rect x="22.8" y="437" width="287.1" height="15.0" fill="rgb(218,1,42)" rx="2" ry="2" />
<text  x="25.83" y="447.5" >do_idle</text>
</g>
<g >
<title>blk_mq_run_hw_queue (16 samples, 0.01%)</title><rect x="20.3" y="389" width="0.2" height="15.0" fill="rgb(242,11,39)" rx="2" ry="2" />
<text  x="23.33" y="399.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.Apply (128 samples, 0.10%)</title><rect x="15.6" y="261" width="1.2" height="15.0" fill="rgb(244,58,47)" rx="2" ry="2" />
<text  x="18.58" y="271.5" ></text>
</g>
<g >
<title>io.(*teeReader).Read (83 samples, 0.07%)</title><rect x="15.6" y="149" width="0.8" height="15.0" fill="rgb(206,32,48)" rx="2" ry="2" />
<text  x="18.61" y="159.5" ></text>
</g>
<g >
<title>[zedbox] (369 samples, 0.29%)</title><rect x="1185.8" y="309" width="3.5" height="15.0" fill="rgb(215,51,13)" rx="2" ry="2" />
<text  x="1188.83" y="319.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (39 samples, 0.03%)</title><rect x="10.6" y="437" width="0.4" height="15.0" fill="rgb(237,65,10)" rx="2" ry="2" />
<text  x="13.62" y="447.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff/walking/plugin.(*diffPlugin).Apply (407 samples, 0.32%)</title><rect x="13.0" y="341" width="3.8" height="15.0" fill="rgb(217,133,23)" rx="2" ry="2" />
<text  x="15.97" y="351.5" ></text>
</g>
<g >
<title>[perf] (17 samples, 0.01%)</title><rect x="21.1" y="389" width="0.2" height="15.0" fill="rgb(218,42,6)" rx="2" ry="2" />
<text  x="24.14" y="399.5" ></text>
</g>
<g >
<title>jbd2/sda9-8 (51 samples, 0.04%)</title><rect x="17.9" y="501" width="0.4" height="15.0" fill="rgb(238,81,27)" rx="2" ry="2" />
<text  x="20.86" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (11 samples, 0.01%)</title><rect x="1189.9" y="357" width="0.1" height="15.0" fill="rgb(252,115,51)" rx="2" ry="2" />
<text  x="1192.85" y="367.5" ></text>
</g>
<g >
<title>[newlogd] (28 samples, 0.02%)</title><rect x="20.8" y="389" width="0.3" height="15.0" fill="rgb(210,156,1)" rx="2" ry="2" />
<text  x="23.79" y="399.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (18 samples, 0.01%)</title><rect x="1189.6" y="245" width="0.1" height="15.0" fill="rgb(232,187,44)" rx="2" ry="2" />
<text  x="1192.58" y="255.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (19 samples, 0.02%)</title><rect x="1179.6" y="341" width="0.2" height="15.0" fill="rgb(226,40,44)" rx="2" ry="2" />
<text  x="1182.61" y="351.5" ></text>
</g>
<g >
<title>wb_workfn (11 samples, 0.01%)</title><rect x="20.5" y="421" width="0.1" height="15.0" fill="rgb(230,89,48)" rx="2" ry="2" />
<text  x="23.50" y="431.5" ></text>
</g>
<g >
<title>runtime.goexit (478 samples, 0.38%)</title><rect x="12.4" y="485" width="4.5" height="15.0" fill="rgb(249,101,12)" rx="2" ry="2" />
<text  x="15.44" y="495.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).huffmanBlock (107 samples, 0.08%)</title><rect x="13.1" y="101" width="1.0" height="15.0" fill="rgb(211,101,16)" rx="2" ry="2" />
<text  x="16.14" y="111.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).Read (83 samples, 0.07%)</title><rect x="15.6" y="85" width="0.8" height="15.0" fill="rgb(219,28,6)" rx="2" ry="2" />
<text  x="18.61" y="95.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff/apply.(*readCounter).Read (83 samples, 0.07%)</title><rect x="15.6" y="165" width="0.8" height="15.0" fill="rgb(241,89,14)" rx="2" ry="2" />
<text  x="18.61" y="175.5" ></text>
</g>
<g >
<title>update_blocked_averages (22 samples, 0.02%)</title><rect x="309.4" y="309" width="0.2" height="15.0" fill="rgb(228,118,3)" rx="2" ry="2" />
<text  x="312.42" y="319.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).huffSym (13 samples, 0.01%)</title><rect x="16.2" y="37" width="0.2" height="15.0" fill="rgb(237,189,0)" rx="2" ry="2" />
<text  x="19.23" y="47.5" ></text>
</g>
<g >
<title>[zedbox] (29 samples, 0.02%)</title><rect x="1181.6" y="389" width="0.3" height="15.0" fill="rgb(205,14,45)" rx="2" ry="2" />
<text  x="1184.58" y="399.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (11 samples, 0.01%)</title><rect x="12.8" y="197" width="0.1" height="15.0" fill="rgb(251,174,1)" rx="2" ry="2" />
<text  x="15.84" y="207.5" ></text>
</g>
<g >
<title>do_nanosleep (13 samples, 0.01%)</title><rect x="1181.7" y="309" width="0.1" height="15.0" fill="rgb(245,81,46)" rx="2" ry="2" />
<text  x="1184.73" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.01%)</title><rect x="10.3" y="421" width="0.1" height="15.0" fill="rgb(225,201,9)" rx="2" ry="2" />
<text  x="13.29" y="431.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (44 samples, 0.03%)</title><rect x="309.2" y="389" width="0.5" height="15.0" fill="rgb(226,164,19)" rx="2" ry="2" />
<text  x="312.24" y="399.5" ></text>
</g>
<g >
<title>[zedbox] (31 samples, 0.02%)</title><rect x="1181.6" y="421" width="0.3" height="15.0" fill="rgb(212,124,15)" rx="2" ry="2" />
<text  x="1184.57" y="431.5" ></text>
</g>
<g >
<title>kworker/u8:1-ev (11 samples, 0.01%)</title><rect x="20.5" y="501" width="0.1" height="15.0" fill="rgb(211,61,43)" rx="2" ry="2" />
<text  x="23.50" y="511.5" ></text>
</g>
<g >
<title>[newlogd] (32 samples, 0.03%)</title><rect x="20.8" y="469" width="0.3" height="15.0" fill="rgb(244,23,48)" rx="2" ry="2" />
<text  x="23.76" y="479.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (44 samples, 0.03%)</title><rect x="309.2" y="373" width="0.5" height="15.0" fill="rgb(232,64,49)" rx="2" ry="2" />
<text  x="312.24" y="383.5" ></text>
</g>
<g >
<title>blk_done_softirq (34 samples, 0.03%)</title><rect x="1180.0" y="325" width="0.3" height="15.0" fill="rgb(209,24,7)" rx="2" ry="2" />
<text  x="1183.02" y="335.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (18 samples, 0.01%)</title><rect x="17.3" y="437" width="0.2" height="15.0" fill="rgb(245,37,9)" rx="2" ry="2" />
<text  x="20.30" y="447.5" ></text>
</g>
<g >
<title>__blk_mq_run_hw_queue (16 samples, 0.01%)</title><rect x="20.3" y="357" width="0.2" height="15.0" fill="rgb(227,47,40)" rx="2" ry="2" />
<text  x="23.33" y="367.5" ></text>
</g>
<g >
<title>journal_submit_commit_record (13 samples, 0.01%)</title><rect x="18.1" y="421" width="0.1" height="15.0" fill="rgb(209,44,25)" rx="2" ry="2" />
<text  x="21.11" y="431.5" ></text>
</g>
<g >
<title>runc (13 samples, 0.01%)</title><rect x="22.6" y="501" width="0.1" height="15.0" fill="rgb(231,217,28)" rx="2" ry="2" />
<text  x="25.61" y="511.5" ></text>
</g>
<g >
<title>[unknown] (43 samples, 0.03%)</title><rect x="21.7" y="485" width="0.4" height="15.0" fill="rgb(207,120,52)" rx="2" ry="2" />
<text  x="24.68" y="495.5" ></text>
</g>
<g >
<title>[zedbox] (688 samples, 0.55%)</title><rect x="1183.5" y="405" width="6.5" height="15.0" fill="rgb(243,167,47)" rx="2" ry="2" />
<text  x="1186.54" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (21 samples, 0.02%)</title><rect x="17.3" y="469" width="0.2" height="15.0" fill="rgb(241,181,19)" rx="2" ry="2" />
<text  x="20.27" y="479.5" ></text>
</g>
<g >
<title>[unknown] (112 samples, 0.09%)</title><rect x="10.1" y="469" width="1.1" height="15.0" fill="rgb(213,57,11)" rx="2" ry="2" />
<text  x="13.15" y="479.5" ></text>
</g>
<g >
<title>[newlogd] (13 samples, 0.01%)</title><rect x="20.8" y="341" width="0.2" height="15.0" fill="rgb(212,91,3)" rx="2" ry="2" />
<text  x="23.85" y="351.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).huffSym (53 samples, 0.04%)</title><rect x="13.6" y="85" width="0.5" height="15.0" fill="rgb(222,21,51)" rx="2" ry="2" />
<text  x="16.61" y="95.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (18 samples, 0.01%)</title><rect x="1189.6" y="261" width="0.1" height="15.0" fill="rgb(240,176,21)" rx="2" ry="2" />
<text  x="1192.58" y="271.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (19 samples, 0.02%)</title><rect x="1180.5" y="229" width="0.2" height="15.0" fill="rgb(243,158,27)" rx="2" ry="2" />
<text  x="1183.50" y="239.5" ></text>
</g>
<g >
<title>__do_sys_nanosleep (15 samples, 0.01%)</title><rect x="1181.7" y="341" width="0.1" height="15.0" fill="rgb(214,18,24)" rx="2" ry="2" />
<text  x="1184.71" y="351.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (15 samples, 0.01%)</title><rect x="15.0" y="53" width="0.2" height="15.0" fill="rgb(234,12,19)" rx="2" ry="2" />
<text  x="18.02" y="63.5" ></text>
</g>
<g >
<title>perf (23 samples, 0.02%)</title><rect x="21.1" y="501" width="0.2" height="15.0" fill="rgb(217,72,46)" rx="2" ry="2" />
<text  x="24.13" y="511.5" ></text>
</g>
<g >
<title>scsi_queue_rq (15 samples, 0.01%)</title><rect x="20.3" y="309" width="0.2" height="15.0" fill="rgb(252,19,44)" rx="2" ry="2" />
<text  x="23.33" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.01%)</title><rect x="1189.7" y="357" width="0.2" height="15.0" fill="rgb(214,88,3)" rx="2" ry="2" />
<text  x="1192.75" y="367.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/services/diff.(*local).Apply (407 samples, 0.32%)</title><rect x="13.0" y="357" width="3.8" height="15.0" fill="rgb(229,27,5)" rx="2" ry="2" />
<text  x="15.97" y="367.5" ></text>
</g>
<g >
<title>archive/tar.(*Reader).Read (83 samples, 0.07%)</title><rect x="15.6" y="197" width="0.8" height="15.0" fill="rgb(252,213,9)" rx="2" ry="2" />
<text  x="18.61" y="207.5" ></text>
</g>
<g >
<title>[jq] (115 samples, 0.09%)</title><rect x="18.3" y="485" width="1.1" height="15.0" fill="rgb(208,180,29)" rx="2" ry="2" />
<text  x="21.34" y="495.5" ></text>
</g>
<g >
<title>os.(*File).Write (30 samples, 0.02%)</title><rect x="15.0" y="229" width="0.3" height="15.0" fill="rgb(241,115,50)" rx="2" ry="2" />
<text  x="17.99" y="239.5" ></text>
</g>
<g >
<title>memlogd (11 samples, 0.01%)</title><rect x="20.6" y="501" width="0.1" height="15.0" fill="rgb(222,160,3)" rx="2" ry="2" />
<text  x="23.62" y="511.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (28 samples, 0.02%)</title><rect x="15.0" y="85" width="0.3" height="15.0" fill="rgb(223,219,42)" rx="2" ry="2" />
<text  x="18.01" y="95.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16 samples, 0.01%)</title><rect x="1181.7" y="373" width="0.2" height="15.0" fill="rgb(240,171,12)" rx="2" ry="2" />
<text  x="1184.71" y="383.5" ></text>
</g>
<g >
<title>process_one_work (17 samples, 0.01%)</title><rect x="20.3" y="437" width="0.2" height="15.0" fill="rgb(232,125,48)" rx="2" ry="2" />
<text  x="23.32" y="447.5" ></text>
</g>
<g >
<title>schedule_idle (19 samples, 0.02%)</title><rect x="309.7" y="421" width="0.2" height="15.0" fill="rgb(240,224,19)" rx="2" ry="2" />
<text  x="312.73" y="431.5" ></text>
</g>
<g >
<title>new_sync_write (18 samples, 0.01%)</title><rect x="1189.6" y="277" width="0.1" height="15.0" fill="rgb(209,161,25)" rx="2" ry="2" />
<text  x="1192.58" y="287.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (19 samples, 0.02%)</title><rect x="309.7" y="357" width="0.2" height="15.0" fill="rgb(235,32,15)" rx="2" ry="2" />
<text  x="312.73" y="367.5" ></text>
</g>
<g >
<title>[perf] (22 samples, 0.02%)</title><rect x="21.1" y="485" width="0.2" height="15.0" fill="rgb(251,204,46)" rx="2" ry="2" />
<text  x="24.14" y="495.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/api/services/diff/v1._Diff_Apply_Handler (407 samples, 0.32%)</title><rect x="13.0" y="421" width="3.8" height="15.0" fill="rgb(242,1,36)" rx="2" ry="2" />
<text  x="15.97" y="431.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/github.com/grpc-ecosystem/go-grpc-prometheus.(*ServerMetrics).UnaryServerInterceptor.func1 (407 samples, 0.32%)</title><rect x="13.0" y="405" width="3.8" height="15.0" fill="rgb(205,76,17)" rx="2" ry="2" />
<text  x="15.97" y="415.5" ></text>
</g>
<g >
<title>__raw_spin_unlock_irq (37 samples, 0.03%)</title><rect x="1180.9" y="373" width="0.4" height="15.0" fill="rgb(223,214,39)" rx="2" ry="2" />
<text  x="1183.95" y="383.5" ></text>
</g>
<g >
<title>napi_gro_receive (39 samples, 0.03%)</title><rect x="1180.4" y="277" width="0.3" height="15.0" fill="rgb(242,64,17)" rx="2" ry="2" />
<text  x="1183.36" y="287.5" ></text>
</g>
<g >
<title>irq_exit (19 samples, 0.02%)</title><rect x="1179.6" y="357" width="0.2" height="15.0" fill="rgb(215,82,38)" rx="2" ry="2" />
<text  x="1182.61" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (14 samples, 0.01%)</title><rect x="1189.3" y="309" width="0.2" height="15.0" fill="rgb(207,225,37)" rx="2" ry="2" />
<text  x="1192.34" y="319.5" ></text>
</g>
<g >
<title>[zedbox] (30 samples, 0.02%)</title><rect x="1188.1" y="149" width="0.2" height="15.0" fill="rgb(245,76,33)" rx="2" ry="2" />
<text  x="1191.06" y="159.5" ></text>
</g>
<g >
<title>compress/gzip.(*Reader).Read (200 samples, 0.16%)</title><rect x="13.1" y="133" width="1.9" height="15.0" fill="rgb(225,24,5)" rx="2" ry="2" />
<text  x="16.12" y="143.5" ></text>
</g>
<g >
<title>containerd-shim (14 samples, 0.01%)</title><rect x="10.0" y="501" width="0.1" height="15.0" fill="rgb(220,187,37)" rx="2" ry="2" />
<text  x="13.02" y="511.5" ></text>
</g>
<g >
<title>[zedbox] (766 samples, 0.61%)</title><rect x="1182.8" y="437" width="7.2" height="15.0" fill="rgb(248,43,4)" rx="2" ry="2" />
<text  x="1185.82" y="447.5" ></text>
</g>
<g >
<title>[newlogd] (32 samples, 0.03%)</title><rect x="20.8" y="485" width="0.3" height="15.0" fill="rgb(250,147,7)" rx="2" ry="2" />
<text  x="23.76" y="495.5" ></text>
</g>
<g >
<title>net_rx_action (46 samples, 0.04%)</title><rect x="1180.3" y="325" width="0.5" height="15.0" fill="rgb(240,207,31)" rx="2" ry="2" />
<text  x="1183.34" y="335.5" ></text>
</g>
<g >
<title>[perf] (12 samples, 0.01%)</title><rect x="21.1" y="341" width="0.2" height="15.0" fill="rgb(214,205,41)" rx="2" ry="2" />
<text  x="24.14" y="351.5" ></text>
</g>
<g >
<title>[unknown] (31 samples, 0.02%)</title><rect x="1181.6" y="469" width="0.3" height="15.0" fill="rgb(238,160,15)" rx="2" ry="2" />
<text  x="1184.57" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (16 samples, 0.01%)</title><rect x="1181.7" y="357" width="0.2" height="15.0" fill="rgb(248,23,26)" rx="2" ry="2" />
<text  x="1184.71" y="367.5" ></text>
</g>
<g >
<title>[libpython3.8.so.1.0] (27 samples, 0.02%)</title><rect x="21.4" y="485" width="0.3" height="15.0" fill="rgb(214,174,11)" rx="2" ry="2" />
<text  x="24.43" y="495.5" ></text>
</g>
<g >
<title>qemu-system-x86 (17 samples, 0.01%)</title><rect x="22.3" y="501" width="0.1" height="15.0" fill="rgb(239,29,3)" rx="2" ry="2" />
<text  x="25.26" y="511.5" ></text>
</g>
<g >
<title>[zedbox] (769 samples, 0.61%)</title><rect x="1182.8" y="453" width="7.2" height="15.0" fill="rgb(232,95,33)" rx="2" ry="2" />
<text  x="1185.79" y="463.5" ></text>
</g>
<g >
<title>[perf] (17 samples, 0.01%)</title><rect x="21.1" y="453" width="0.2" height="15.0" fill="rgb(219,75,31)" rx="2" ry="2" />
<text  x="24.14" y="463.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff/apply.apply.func1 (128 samples, 0.10%)</title><rect x="15.6" y="277" width="1.2" height="15.0" fill="rgb(230,108,1)" rx="2" ry="2" />
<text  x="18.58" y="287.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/services/content/contentserver.(*service).Write (24 samples, 0.02%)</title><rect x="12.7" y="389" width="0.3" height="15.0" fill="rgb(229,74,36)" rx="2" ry="2" />
<text  x="15.73" y="399.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).serveStreams.func1.1 (443 samples, 0.35%)</title><rect x="12.7" y="469" width="4.2" height="15.0" fill="rgb(239,207,9)" rx="2" ry="2" />
<text  x="15.71" y="479.5" ></text>
</g>
<g >
<title>compress/gzip.(*Reader).Read (83 samples, 0.07%)</title><rect x="15.6" y="101" width="0.8" height="15.0" fill="rgb(222,56,15)" rx="2" ry="2" />
<text  x="18.61" y="111.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (19 samples, 0.02%)</title><rect x="1180.5" y="213" width="0.2" height="15.0" fill="rgb(209,225,6)" rx="2" ry="2" />
<text  x="1183.50" y="223.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.copyBuffered (231 samples, 0.18%)</title><rect x="13.1" y="245" width="2.2" height="15.0" fill="rgb(245,117,22)" rx="2" ry="2" />
<text  x="16.11" y="255.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (19 samples, 0.02%)</title><rect x="1180.5" y="197" width="0.2" height="15.0" fill="rgb(222,24,54)" rx="2" ry="2" />
<text  x="1183.50" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (22 samples, 0.02%)</title><rect x="1188.7" y="245" width="0.2" height="15.0" fill="rgb(220,48,35)" rx="2" ry="2" />
<text  x="1191.74" y="255.5" ></text>
</g>
<g >
<title>native_safe_halt (93,031 samples, 73.80%)</title><rect x="309.9" y="405" width="870.9" height="15.0" fill="rgb(226,133,50)" rx="2" ry="2" />
<text  x="312.94" y="415.5" >native_safe_halt</text>
</g>
<g >
<title>[zedbox] (770 samples, 0.61%)</title><rect x="1182.8" y="469" width="7.2" height="15.0" fill="rgb(227,212,42)" rx="2" ry="2" />
<text  x="1185.78" y="479.5" ></text>
</g>
<g >
<title>scsi_end_request (30 samples, 0.02%)</title><rect x="1180.0" y="293" width="0.3" height="15.0" fill="rgb(243,41,33)" rx="2" ry="2" />
<text  x="1183.05" y="303.5" ></text>
</g>
<g >
<title>__raw_spin_unlock_irq (19 samples, 0.02%)</title><rect x="309.7" y="373" width="0.2" height="15.0" fill="rgb(206,48,1)" rx="2" ry="2" />
<text  x="312.73" y="383.5" ></text>
</g>
<g >
<title>__sched_text_start (19 samples, 0.02%)</title><rect x="309.7" y="405" width="0.2" height="15.0" fill="rgb(249,51,40)" rx="2" ry="2" />
<text  x="312.73" y="415.5" ></text>
</g>
<g >
<title>qemu-img (12 samples, 0.01%)</title><rect x="22.2" y="501" width="0.1" height="15.0" fill="rgb(220,133,19)" rx="2" ry="2" />
<text  x="25.15" y="511.5" ></text>
</g>
<g >
<title>native_safe_halt (30,641 samples, 24.31%)</title><rect x="22.9" y="405" width="286.8" height="15.0" fill="rgb(207,218,11)" rx="2" ry="2" />
<text  x="25.86" y="415.5" >native_safe_halt</text>
</g>
<g >
<title>[zedbox] (18 samples, 0.01%)</title><rect x="1188.1" y="133" width="0.2" height="15.0" fill="rgb(240,154,38)" rx="2" ry="2" />
<text  x="1191.14" y="143.5" ></text>
</g>
<g >
<title>iptables (25 samples, 0.02%)</title><rect x="17.6" y="501" width="0.3" height="15.0" fill="rgb(212,168,16)" rx="2" ry="2" />
<text  x="20.63" y="511.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).handleStream (443 samples, 0.35%)</title><rect x="12.7" y="453" width="4.2" height="15.0" fill="rgb(247,211,52)" rx="2" ry="2" />
<text  x="15.71" y="463.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/content/local.(*writer).Write (11 samples, 0.01%)</title><rect x="12.8" y="357" width="0.1" height="15.0" fill="rgb(205,202,45)" rx="2" ry="2" />
<text  x="15.84" y="367.5" ></text>
</g>
<g >
<title>schedule_idle (39 samples, 0.03%)</title><rect x="1180.9" y="421" width="0.4" height="15.0" fill="rgb(216,9,20)" rx="2" ry="2" />
<text  x="1183.93" y="431.5" ></text>
</g>
<g >
<title>start_kernel (30,669 samples, 24.33%)</title><rect x="22.8" y="469" width="287.1" height="15.0" fill="rgb(211,66,32)" rx="2" ry="2" />
<text  x="25.83" y="479.5" >start_kernel</text>
</g>
<g >
<title>bufio.(*Reader).ReadByte (15 samples, 0.01%)</title><rect x="14.0" y="69" width="0.1" height="15.0" fill="rgb(209,72,2)" rx="2" ry="2" />
<text  x="16.97" y="79.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).huffmanBlock (47 samples, 0.04%)</title><rect x="15.6" y="69" width="0.5" height="15.0" fill="rgb(245,118,29)" rx="2" ry="2" />
<text  x="18.64" y="79.5" ></text>
</g>
<g >
<title>bufio.(*Reader).ReadByte (12 samples, 0.01%)</title><rect x="14.7" y="53" width="0.1" height="15.0" fill="rgb(251,184,48)" rx="2" ry="2" />
<text  x="17.68" y="63.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.01%)</title><rect x="1189.1" y="277" width="0.1" height="15.0" fill="rgb(242,94,52)" rx="2" ry="2" />
<text  x="1192.08" y="287.5" ></text>
</g>
<g >
<title>ret_from_intr (95 samples, 0.08%)</title><rect x="1179.9" y="389" width="0.9" height="15.0" fill="rgb(226,112,21)" rx="2" ry="2" />
<text  x="1182.88" y="399.5" ></text>
</g>
<g >
<title>do_IRQ (95 samples, 0.08%)</title><rect x="1179.9" y="373" width="0.9" height="15.0" fill="rgb(217,173,6)" rx="2" ry="2" />
<text  x="1182.88" y="383.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive/compression.(*readCloserWrapper).Read (200 samples, 0.16%)</title><rect x="13.1" y="149" width="1.9" height="15.0" fill="rgb(223,43,3)" rx="2" ry="2" />
<text  x="16.12" y="159.5" ></text>
</g>
<g >
<title>vfs_write (11 samples, 0.01%)</title><rect x="12.8" y="245" width="0.1" height="15.0" fill="rgb(219,36,48)" rx="2" ry="2" />
<text  x="15.84" y="255.5" ></text>
</g>
<g >
<title>finish_task_switch (37 samples, 0.03%)</title><rect x="1180.9" y="389" width="0.4" height="15.0" fill="rgb(216,58,10)" rx="2" ry="2" />
<text  x="1183.95" y="399.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.openFile (12 samples, 0.01%)</title><rect x="15.3" y="245" width="0.1" height="15.0" fill="rgb(228,99,50)" rx="2" ry="2" />
<text  x="18.32" y="255.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (11 samples, 0.01%)</title><rect x="1180.4" y="229" width="0.1" height="15.0" fill="rgb(211,192,0)" rx="2" ry="2" />
<text  x="1183.36" y="239.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff.(*compressedProcessor).Read (200 samples, 0.16%)</title><rect x="13.1" y="165" width="1.9" height="15.0" fill="rgb(248,128,43)" rx="2" ry="2" />
<text  x="16.12" y="175.5" ></text>
</g>
<g >
<title>end_bio_bh_io_sync (12 samples, 0.01%)</title><rect x="1180.2" y="261" width="0.1" height="15.0" fill="rgb(230,121,42)" rx="2" ry="2" />
<text  x="1183.17" y="271.5" ></text>
</g>
<g >
<title>iowrite16 (12 samples, 0.01%)</title><rect x="20.4" y="229" width="0.1" height="15.0" fill="rgb(238,32,25)" rx="2" ry="2" />
<text  x="23.36" y="239.5" ></text>
</g>
<g >
<title>cpu_startup_entry (30,669 samples, 24.33%)</title><rect x="22.8" y="453" width="287.1" height="15.0" fill="rgb(243,163,26)" rx="2" ry="2" />
<text  x="25.83" y="463.5" >cpu_startup_entry</text>
</g>
<g >
<title>[ld-musl-x86_64.so.1] (56 samples, 0.04%)</title><rect x="16.9" y="485" width="0.6" height="15.0" fill="rgb(238,67,36)" rx="2" ry="2" />
<text  x="19.95" y="495.5" ></text>
</g>
<g >
<title>containerd (723 samples, 0.57%)</title><rect x="10.1" y="501" width="6.8" height="15.0" fill="rgb(247,219,50)" rx="2" ry="2" />
<text  x="13.15" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (14 samples, 0.01%)</title><rect x="1189.3" y="325" width="0.2" height="15.0" fill="rgb(254,100,35)" rx="2" ry="2" />
<text  x="1192.34" y="335.5" ></text>
</g>
<g >
<title>python3 (77 samples, 0.06%)</title><rect x="21.4" y="501" width="0.8" height="15.0" fill="rgb(249,177,53)" rx="2" ry="2" />
<text  x="24.43" y="511.5" ></text>
</g>
<g >
<title>cpu_startup_entry (93,089 samples, 73.85%)</title><rect x="309.9" y="453" width="871.4" height="15.0" fill="rgb(222,227,38)" rx="2" ry="2" />
<text  x="312.92" y="463.5" >cpu_startup_entry</text>
</g>
<g >
<title>__sched_text_start (37 samples, 0.03%)</title><rect x="1180.9" y="405" width="0.4" height="15.0" fill="rgb(253,29,4)" rx="2" ry="2" />
<text  x="1183.95" y="415.5" ></text>
</g>
<g >
<title>[zedbox] (242 samples, 0.19%)</title><rect x="1186.7" y="261" width="2.2" height="15.0" fill="rgb(239,194,5)" rx="2" ry="2" />
<text  x="1189.68" y="271.5" ></text>
</g>
<g >
<title>vfs_write (28 samples, 0.02%)</title><rect x="15.0" y="133" width="0.3" height="15.0" fill="rgb(213,116,21)" rx="2" ry="2" />
<text  x="18.01" y="143.5" ></text>
</g>
<g >
<title>[zedbox] (132 samples, 0.10%)</title><rect x="1187.4" y="229" width="1.2" height="15.0" fill="rgb(205,171,13)" rx="2" ry="2" />
<text  x="1190.41" y="239.5" ></text>
</g>
<g >
<title>generic_perform_write (18 samples, 0.01%)</title><rect x="1189.6" y="229" width="0.1" height="15.0" fill="rgb(210,108,28)" rx="2" ry="2" />
<text  x="1192.58" y="239.5" ></text>
</g>
<g >
<title>virtscsi_queuecommand (12 samples, 0.01%)</title><rect x="20.4" y="293" width="0.1" height="15.0" fill="rgb(225,75,15)" rx="2" ry="2" />
<text  x="23.36" y="303.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/mount.WithTempMount (128 samples, 0.10%)</title><rect x="15.6" y="293" width="1.2" height="15.0" fill="rgb(245,129,0)" rx="2" ry="2" />
<text  x="18.58" y="303.5" ></text>
</g>
<g >
<title>new_sync_write (28 samples, 0.02%)</title><rect x="15.0" y="117" width="0.3" height="15.0" fill="rgb(225,3,6)" rx="2" ry="2" />
<text  x="18.01" y="127.5" ></text>
</g>
<g >
<title>[zedbox] (659 samples, 0.52%)</title><rect x="1183.8" y="389" width="6.2" height="15.0" fill="rgb(253,88,6)" rx="2" ry="2" />
<text  x="1186.78" y="399.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/services/diff.(*service).Apply (407 samples, 0.32%)</title><rect x="13.0" y="373" width="3.8" height="15.0" fill="rgb(213,12,44)" rx="2" ry="2" />
<text  x="15.97" y="383.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff/apply.apply (407 samples, 0.32%)</title><rect x="13.0" y="309" width="3.8" height="15.0" fill="rgb(242,168,43)" rx="2" ry="2" />
<text  x="15.97" y="319.5" ></text>
</g>
<g >
<title>[newlogd] (32 samples, 0.03%)</title><rect x="20.8" y="453" width="0.3" height="15.0" fill="rgb(227,134,51)" rx="2" ry="2" />
<text  x="23.76" y="463.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.createTarFile (258 samples, 0.20%)</title><rect x="13.1" y="261" width="2.4" height="15.0" fill="rgb(222,169,40)" rx="2" ry="2" />
<text  x="16.07" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (22 samples, 0.02%)</title><rect x="1188.4" y="213" width="0.2" height="15.0" fill="rgb(247,118,9)" rx="2" ry="2" />
<text  x="1191.44" y="223.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (19 samples, 0.02%)</title><rect x="1179.6" y="373" width="0.2" height="15.0" fill="rgb(237,71,47)" rx="2" ry="2" />
<text  x="1182.61" y="383.5" ></text>
</g>
<g >
<title>[zedbox] (320 samples, 0.25%)</title><rect x="1186.2" y="293" width="3.0" height="15.0" fill="rgb(216,110,47)" rx="2" ry="2" />
<text  x="1189.19" y="303.5" ></text>
</g>
<g >
<title>ksys_write (11 samples, 0.01%)</title><rect x="12.8" y="261" width="0.1" height="15.0" fill="rgb(229,155,7)" rx="2" ry="2" />
<text  x="15.84" y="271.5" ></text>
</g>
<g >
<title>[unknown] (243 samples, 0.19%)</title><rect x="10.1" y="485" width="2.3" height="15.0" fill="rgb(241,30,16)" rx="2" ry="2" />
<text  x="13.15" y="495.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (39 samples, 0.03%)</title><rect x="1180.4" y="245" width="0.3" height="15.0" fill="rgb(232,37,45)" rx="2" ry="2" />
<text  x="1183.36" y="255.5" ></text>
</g>
<g >
<title>[zedbox] (46 samples, 0.04%)</title><rect x="1187.9" y="181" width="0.5" height="15.0" fill="rgb(232,27,50)" rx="2" ry="2" />
<text  x="1190.93" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (11 samples, 0.01%)</title><rect x="1189.1" y="261" width="0.1" height="15.0" fill="rgb(239,31,1)" rx="2" ry="2" />
<text  x="1192.08" y="271.5" ></text>
</g>
<g >
<title>ret_from_fork (19 samples, 0.02%)</title><rect x="20.3" y="485" width="0.2" height="15.0" fill="rgb(250,170,20)" rx="2" ry="2" />
<text  x="23.32" y="495.5" ></text>
</g>
<g >
<title>finish_task_switch (19 samples, 0.02%)</title><rect x="309.7" y="389" width="0.2" height="15.0" fill="rgb(244,89,28)" rx="2" ry="2" />
<text  x="312.73" y="399.5" ></text>
</g>
<g >
<title>[perf] (17 samples, 0.01%)</title><rect x="21.1" y="421" width="0.2" height="15.0" fill="rgb(232,114,43)" rx="2" ry="2" />
<text  x="24.14" y="431.5" ></text>
</g>
<g >
<title>ip6tables (11 samples, 0.01%)</title><rect x="17.5" y="501" width="0.1" height="15.0" fill="rgb(254,58,14)" rx="2" ry="2" />
<text  x="20.53" y="511.5" ></text>
</g>
<g >
<title>generic_perform_write (28 samples, 0.02%)</title><rect x="15.0" y="69" width="0.3" height="15.0" fill="rgb(205,70,33)" rx="2" ry="2" />
<text  x="18.01" y="79.5" ></text>
</g>
<g >
<title>syscall.Syscall (30 samples, 0.02%)</title><rect x="15.0" y="197" width="0.3" height="15.0" fill="rgb(236,35,17)" rx="2" ry="2" />
<text  x="17.99" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (21 samples, 0.02%)</title><rect x="1188.7" y="229" width="0.2" height="15.0" fill="rgb(207,143,23)" rx="2" ry="2" />
<text  x="1191.74" y="239.5" ></text>
</g>
<g >
<title>blk_mq_requeue_work (17 samples, 0.01%)</title><rect x="20.3" y="421" width="0.2" height="15.0" fill="rgb(252,115,50)" rx="2" ry="2" />
<text  x="23.32" y="431.5" ></text>
</g>
<g >
<title>kthread (19 samples, 0.02%)</title><rect x="20.3" y="469" width="0.2" height="15.0" fill="rgb(226,158,2)" rx="2" ry="2" />
<text  x="23.32" y="479.5" ></text>
</g>
<g >
<title>[zedbox] (422 samples, 0.33%)</title><rect x="1185.4" y="325" width="3.9" height="15.0" fill="rgb(234,184,44)" rx="2" ry="2" />
<text  x="1188.39" y="335.5" ></text>
</g>
<g >
<title>kthread (11 samples, 0.01%)</title><rect x="20.5" y="469" width="0.1" height="15.0" fill="rgb(212,21,7)" rx="2" ry="2" />
<text  x="23.50" y="479.5" ></text>
</g>
<g >
<title>ret_from_fork (49 samples, 0.04%)</title><rect x="17.9" y="485" width="0.4" height="15.0" fill="rgb(242,107,44)" rx="2" ry="2" />
<text  x="20.88" y="495.5" ></text>
</g>
<g >
<title>hrtimer_nanosleep (14 samples, 0.01%)</title><rect x="1181.7" y="325" width="0.1" height="15.0" fill="rgb(215,66,10)" rx="2" ry="2" />
<text  x="1184.72" y="335.5" ></text>
</g>
<g >
<title>kworker/3:1H-kb (19 samples, 0.02%)</title><rect x="20.3" y="501" width="0.2" height="15.0" fill="rgb(231,194,49)" rx="2" ry="2" />
<text  x="23.32" y="511.5" ></text>
</g>
<g >
<title>[perf] (17 samples, 0.01%)</title><rect x="21.1" y="373" width="0.2" height="15.0" fill="rgb(244,128,42)" rx="2" ry="2" />
<text  x="24.14" y="383.5" ></text>
</g>
<g >
<title>runtime.futex (12 samples, 0.01%)</title><rect x="10.3" y="437" width="0.1" height="15.0" fill="rgb(219,69,23)" rx="2" ry="2" />
<text  x="13.29" y="447.5" ></text>
</g>
<g >
<title>kthread (49 samples, 0.04%)</title><rect x="17.9" y="469" width="0.4" height="15.0" fill="rgb(243,211,12)" rx="2" ry="2" />
<text  x="20.88" y="479.5" ></text>
</g>
<g >
<title>[zedbox] (471 samples, 0.37%)</title><rect x="1185.1" y="341" width="4.4" height="15.0" fill="rgb(254,68,49)" rx="2" ry="2" />
<text  x="1188.07" y="351.5" ></text>
</g>
<g >
<title>[newlogd] (17 samples, 0.01%)</title><rect x="20.8" y="357" width="0.2" height="15.0" fill="rgb(220,92,47)" rx="2" ry="2" />
<text  x="23.81" y="367.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive/compression.(*readCloserWrapper).Read (83 samples, 0.07%)</title><rect x="15.6" y="117" width="0.8" height="15.0" fill="rgb(250,122,25)" rx="2" ry="2" />
<text  x="18.61" y="127.5" ></text>
</g>
<g >
<title>__cpuidle_text_start (30,642 samples, 24.31%)</title><rect x="22.9" y="421" width="286.8" height="15.0" fill="rgb(245,152,7)" rx="2" ry="2" />
<text  x="25.85" y="431.5" >__cpuidle_text_start</text>
</g>
<g >
<title>run_rebalance_domains (22 samples, 0.02%)</title><rect x="309.4" y="325" width="0.2" height="15.0" fill="rgb(222,167,27)" rx="2" ry="2" />
<text  x="312.42" y="335.5" ></text>
</g>
<g >
<title>secondary_startup_64 (123,758 samples, 98.17%)</title><rect x="22.8" y="485" width="1158.5" height="15.0" fill="rgb(208,139,20)" rx="2" ry="2" />
<text  x="25.83" y="495.5" >secondary_startup_64</text>
</g>
<g >
<title>ext4_file_write_iter (11 samples, 0.01%)</title><rect x="12.8" y="213" width="0.1" height="15.0" fill="rgb(243,117,18)" rx="2" ry="2" />
<text  x="15.84" y="223.5" ></text>
</g>
<g >
<title>[ld-musl-x86_64.so.1] (17 samples, 0.01%)</title><rect x="21.1" y="469" width="0.2" height="15.0" fill="rgb(241,76,21)" rx="2" ry="2" />
<text  x="24.14" y="479.5" ></text>
</g>
<g >
<title>worker_thread (19 samples, 0.02%)</title><rect x="20.3" y="453" width="0.2" height="15.0" fill="rgb(229,67,21)" rx="2" ry="2" />
<text  x="23.32" y="463.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (12 samples, 0.01%)</title><rect x="11.0" y="421" width="0.1" height="15.0" fill="rgb(247,41,27)" rx="2" ry="2" />
<text  x="14.02" y="431.5" ></text>
</g>
<g >
<title>newlogd (39 samples, 0.03%)</title><rect x="20.8" y="501" width="0.3" height="15.0" fill="rgb(236,47,43)" rx="2" ry="2" />
<text  x="23.76" y="511.5" ></text>
</g>
<g >
<title>runtime.gcDrain (39 samples, 0.03%)</title><rect x="10.6" y="421" width="0.4" height="15.0" fill="rgb(223,175,27)" rx="2" ry="2" />
<text  x="13.62" y="431.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (15 samples, 0.01%)</title><rect x="1179.9" y="325" width="0.1" height="15.0" fill="rgb(248,6,43)" rx="2" ry="2" />
<text  x="1182.88" y="335.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).huffSym (23 samples, 0.02%)</title><rect x="15.8" y="53" width="0.2" height="15.0" fill="rgb(246,75,46)" rx="2" ry="2" />
<text  x="18.79" y="63.5" ></text>
</g>
<g >
<title>[zedbox] (66 samples, 0.05%)</title><rect x="1187.8" y="197" width="0.6" height="15.0" fill="rgb(229,29,10)" rx="2" ry="2" />
<text  x="1190.76" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.01%)</title><rect x="12.8" y="293" width="0.1" height="15.0" fill="rgb(239,188,28)" rx="2" ry="2" />
<text  x="15.84" y="303.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (11 samples, 0.01%)</title><rect x="12.8" y="325" width="0.1" height="15.0" fill="rgb(237,85,16)" rx="2" ry="2" />
<text  x="15.84" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (28 samples, 0.02%)</title><rect x="1189.5" y="341" width="0.2" height="15.0" fill="rgb(242,177,29)" rx="2" ry="2" />
<text  x="1192.49" y="351.5" ></text>
</g>
<g >
<title>irq_exit (95 samples, 0.08%)</title><rect x="1179.9" y="357" width="0.9" height="15.0" fill="rgb(233,47,50)" rx="2" ry="2" />
<text  x="1182.88" y="367.5" ></text>
</g>
<g >
<title>[zedbox] (753 samples, 0.60%)</title><rect x="1182.9" y="421" width="7.1" height="15.0" fill="rgb(216,38,3)" rx="2" ry="2" />
<text  x="1185.94" y="431.5" ></text>
</g>
<g >
<title>[newlogd] (24 samples, 0.02%)</title><rect x="20.8" y="373" width="0.2" height="15.0" fill="rgb(248,49,11)" rx="2" ry="2" />
<text  x="23.80" y="383.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.openFile (14 samples, 0.01%)</title><rect x="16.5" y="213" width="0.1" height="15.0" fill="rgb(252,198,3)" rx="2" ry="2" />
<text  x="19.51" y="223.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/metadata.(*namespacedWriter).Write (11 samples, 0.01%)</title><rect x="12.8" y="373" width="0.1" height="15.0" fill="rgb(240,21,19)" rx="2" ry="2" />
<text  x="15.84" y="383.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.createTarFile (118 samples, 0.09%)</title><rect x="15.6" y="229" width="1.1" height="15.0" fill="rgb(244,34,44)" rx="2" ry="2" />
<text  x="18.60" y="239.5" ></text>
</g>
<g >
<title>archive/tar.(*Reader).next (11 samples, 0.01%)</title><rect x="13.0" y="245" width="0.1" height="15.0" fill="rgb(224,56,17)" rx="2" ry="2" />
<text  x="15.97" y="255.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/diff.(*compressedProcessor).Read (83 samples, 0.07%)</title><rect x="15.6" y="133" width="0.8" height="15.0" fill="rgb(226,74,40)" rx="2" ry="2" />
<text  x="18.61" y="143.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).processStreamingRPC (26 samples, 0.02%)</title><rect x="12.7" y="437" width="0.3" height="15.0" fill="rgb(222,154,19)" rx="2" ry="2" />
<text  x="15.71" y="447.5" ></text>
</g>
<g >
<title>jbd2_journal_commit_transaction (45 samples, 0.04%)</title><rect x="17.9" y="437" width="0.4" height="15.0" fill="rgb(242,100,0)" rx="2" ry="2" />
<text  x="20.90" y="447.5" ></text>
</g>
<g >
<title>writeback_sb_inodes (11 samples, 0.01%)</title><rect x="20.5" y="373" width="0.1" height="15.0" fill="rgb(230,200,47)" rx="2" ry="2" />
<text  x="23.50" y="383.5" ></text>
</g>
<g >
<title>[zedbox] (31 samples, 0.02%)</title><rect x="1181.6" y="405" width="0.3" height="15.0" fill="rgb(228,123,46)" rx="2" ry="2" />
<text  x="1184.57" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (29 samples, 0.02%)</title><rect x="15.0" y="165" width="0.3" height="15.0" fill="rgb(223,148,39)" rx="2" ry="2" />
<text  x="18.00" y="175.5" ></text>
</g>
<g >
<title>blk_mq_dispatch_rq_list (15 samples, 0.01%)</title><rect x="20.3" y="325" width="0.2" height="15.0" fill="rgb(211,70,0)" rx="2" ry="2" />
<text  x="23.33" y="335.5" ></text>
</g>
<g >
<title>[perf] (17 samples, 0.01%)</title><rect x="21.1" y="437" width="0.2" height="15.0" fill="rgb(209,19,39)" rx="2" ry="2" />
<text  x="24.14" y="447.5" ></text>
</g>
<g >
<title>runtime.timerproc (21 samples, 0.02%)</title><rect x="11.0" y="453" width="0.2" height="15.0" fill="rgb(247,91,21)" rx="2" ry="2" />
<text  x="13.98" y="463.5" ></text>
</g>
<g >
<title>all (126,059 samples, 100%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(229,74,48)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>virtqueue_notify (12 samples, 0.01%)</title><rect x="20.4" y="261" width="0.1" height="15.0" fill="rgb(210,205,43)" rx="2" ry="2" />
<text  x="23.36" y="271.5" ></text>
</g>
<g >
<title>ret_from_fork (11 samples, 0.01%)</title><rect x="20.5" y="485" width="0.1" height="15.0" fill="rgb(212,78,10)" rx="2" ry="2" />
<text  x="23.50" y="495.5" ></text>
</g>
<g >
<title>archive/tar.(*regFileReader).Read (200 samples, 0.16%)</title><rect x="13.1" y="213" width="1.9" height="15.0" fill="rgb(223,73,51)" rx="2" ry="2" />
<text  x="16.12" y="223.5" ></text>
</g>
<g >
<title>[newlogd] (31 samples, 0.02%)</title><rect x="20.8" y="421" width="0.3" height="15.0" fill="rgb(252,211,12)" rx="2" ry="2" />
<text  x="23.77" y="431.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (11 samples, 0.01%)</title><rect x="11.0" y="373" width="0.1" height="15.0" fill="rgb(228,134,9)" rx="2" ry="2" />
<text  x="14.03" y="383.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).huffmanBlock (26 samples, 0.02%)</title><rect x="16.1" y="53" width="0.3" height="15.0" fill="rgb(241,148,50)" rx="2" ry="2" />
<text  x="19.11" y="63.5" ></text>
</g>
<g >
<title>runtime.sysmon (11 samples, 0.01%)</title><rect x="10.5" y="453" width="0.1" height="15.0" fill="rgb(219,207,11)" rx="2" ry="2" />
<text  x="13.51" y="463.5" ></text>
</g>
<g >
<title>archive/tar.(*Reader).Next (11 samples, 0.01%)</title><rect x="13.0" y="261" width="0.1" height="15.0" fill="rgb(245,94,53)" rx="2" ry="2" />
<text  x="15.97" y="271.5" ></text>
</g>
<g >
<title>[newlogd] (30 samples, 0.02%)</title><rect x="20.8" y="405" width="0.3" height="15.0" fill="rgb(237,111,28)" rx="2" ry="2" />
<text  x="23.78" y="415.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/api/services/content/v1._Content_Write_Handler (25 samples, 0.02%)</title><rect x="12.7" y="405" width="0.3" height="15.0" fill="rgb(209,211,51)" rx="2" ry="2" />
<text  x="15.72" y="415.5" ></text>
</g>
<g >
<title>receive_buf (44 samples, 0.03%)</title><rect x="1180.3" y="293" width="0.5" height="15.0" fill="rgb(235,129,40)" rx="2" ry="2" />
<text  x="1183.34" y="303.5" ></text>
</g>
<g >
<title>tcp_rcv_established (14 samples, 0.01%)</title><rect x="1180.5" y="165" width="0.1" height="15.0" fill="rgb(243,199,36)" rx="2" ry="2" />
<text  x="1183.51" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (14 samples, 0.01%)</title><rect x="1188.9" y="245" width="0.2" height="15.0" fill="rgb(236,151,5)" rx="2" ry="2" />
<text  x="1191.94" y="255.5" ></text>
</g>
<g >
<title>wwan-init.sh (15 samples, 0.01%)</title><rect x="1181.4" y="501" width="0.2" height="15.0" fill="rgb(232,42,42)" rx="2" ry="2" />
<text  x="1184.43" y="511.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.applyNaive (128 samples, 0.10%)</title><rect x="15.6" y="245" width="1.2" height="15.0" fill="rgb(211,15,38)" rx="2" ry="2" />
<text  x="18.58" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (28 samples, 0.02%)</title><rect x="1189.5" y="325" width="0.2" height="15.0" fill="rgb(234,189,30)" rx="2" ry="2" />
<text  x="1192.49" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (22 samples, 0.02%)</title><rect x="309.4" y="293" width="0.2" height="15.0" fill="rgb(210,111,18)" rx="2" ry="2" />
<text  x="312.42" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (17 samples, 0.01%)</title><rect x="1188.4" y="197" width="0.2" height="15.0" fill="rgb(221,18,45)" rx="2" ry="2" />
<text  x="1191.44" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (29 samples, 0.02%)</title><rect x="15.0" y="181" width="0.3" height="15.0" fill="rgb(224,148,46)" rx="2" ry="2" />
<text  x="18.00" y="191.5" ></text>
</g>
<g >
<title>[newlogd] (32 samples, 0.03%)</title><rect x="20.8" y="437" width="0.3" height="15.0" fill="rgb(229,39,15)" rx="2" ry="2" />
<text  x="23.76" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (15 samples, 0.01%)</title><rect x="1188.9" y="261" width="0.2" height="15.0" fill="rgb(217,110,38)" rx="2" ry="2" />
<text  x="1191.94" y="271.5" ></text>
</g>
<g >
<title>[zedbox] (97 samples, 0.08%)</title><rect x="1181.9" y="469" width="0.9" height="15.0" fill="rgb(247,26,27)" rx="2" ry="2" />
<text  x="1184.86" y="479.5" ></text>
</g>
<g >
<title>__writeback_inodes_wb (11 samples, 0.01%)</title><rect x="20.5" y="389" width="0.1" height="15.0" fill="rgb(226,213,17)" rx="2" ry="2" />
<text  x="23.50" y="399.5" ></text>
</g>
<g >
<title>[zedbox] (91 samples, 0.07%)</title><rect x="1187.6" y="213" width="0.8" height="15.0" fill="rgb(243,9,15)" rx="2" ry="2" />
<text  x="1190.58" y="223.5" ></text>
</g>
<g >
<title>crypto/sha256.block (130 samples, 0.10%)</title><rect x="11.2" y="469" width="1.2" height="15.0" fill="rgb(232,186,1)" rx="2" ry="2" />
<text  x="14.20" y="479.5" ></text>
</g>
<g >
<title>netif_receive_skb_internal (39 samples, 0.03%)</title><rect x="1180.4" y="261" width="0.3" height="15.0" fill="rgb(225,212,51)" rx="2" ry="2" />
<text  x="1183.36" y="271.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).huffmanBlock (68 samples, 0.05%)</title><rect x="14.2" y="85" width="0.6" height="15.0" fill="rgb(253,229,23)" rx="2" ry="2" />
<text  x="17.20" y="95.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 0.05%)</title><rect x="19.5" y="485" width="0.6" height="15.0" fill="rgb(249,34,15)" rx="2" ry="2" />
<text  x="22.46" y="495.5" ></text>
</g>
<g >
<title>[zedbox] (31 samples, 0.02%)</title><rect x="1181.6" y="437" width="0.3" height="15.0" fill="rgb(205,119,34)" rx="2" ry="2" />
<text  x="1184.57" y="447.5" ></text>
</g>
<g >
<title>runtime.scavengeSleep (11 samples, 0.01%)</title><rect x="10.4" y="453" width="0.1" height="15.0" fill="rgb(222,44,22)" rx="2" ry="2" />
<text  x="13.41" y="463.5" ></text>
</g>
<g >
<title>swapper (123,758 samples, 98.17%)</title><rect x="22.8" y="501" width="1158.5" height="15.0" fill="rgb(246,184,28)" rx="2" ry="2" />
<text  x="25.83" y="511.5" >swapper</text>
</g>
<g >
<title>apic_timer_interrupt (19 samples, 0.02%)</title><rect x="1179.6" y="389" width="0.2" height="15.0" fill="rgb(213,223,14)" rx="2" ry="2" />
<text  x="1182.61" y="399.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/google.golang.org/grpc.(*Server).processUnaryRPC (416 samples, 0.33%)</title><rect x="13.0" y="437" width="3.9" height="15.0" fill="rgb(210,34,39)" rx="2" ry="2" />
<text  x="15.96" y="447.5" ></text>
</g>
<g >
<title>[perf] (17 samples, 0.01%)</title><rect x="21.1" y="405" width="0.2" height="15.0" fill="rgb(206,41,32)" rx="2" ry="2" />
<text  x="24.14" y="415.5" ></text>
</g>
<g >
<title>blk_mq_run_hw_queues (17 samples, 0.01%)</title><rect x="20.3" y="405" width="0.2" height="15.0" fill="rgb(250,50,3)" rx="2" ry="2" />
<text  x="23.32" y="415.5" ></text>
</g>
<g >
<title>[zedbox] (31 samples, 0.02%)</title><rect x="1181.6" y="453" width="0.3" height="15.0" fill="rgb(242,21,40)" rx="2" ry="2" />
<text  x="1184.57" y="463.5" ></text>
</g>
<g >
<title>zedbox (901 samples, 0.71%)</title><rect x="1181.6" y="501" width="8.4" height="15.0" fill="rgb(214,69,0)" rx="2" ry="2" />
<text  x="1184.57" y="511.5" ></text>
</g>
<g >
<title>archive/tar.(*Reader).Read (201 samples, 0.16%)</title><rect x="13.1" y="229" width="1.9" height="15.0" fill="rgb(208,154,40)" rx="2" ry="2" />
<text  x="16.11" y="239.5" ></text>
</g>
<g >
<title>ksys_write (29 samples, 0.02%)</title><rect x="15.0" y="149" width="0.3" height="15.0" fill="rgb(219,61,22)" rx="2" ry="2" />
<text  x="18.00" y="159.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.copyBuffered (92 samples, 0.07%)</title><rect x="15.6" y="213" width="0.9" height="15.0" fill="rgb(221,197,44)" rx="2" ry="2" />
<text  x="18.61" y="223.5" ></text>
</g>
<g >
<title>virtnet_poll (46 samples, 0.04%)</title><rect x="1180.3" y="309" width="0.5" height="15.0" fill="rgb(232,173,11)" rx="2" ry="2" />
<text  x="1183.34" y="319.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (30 samples, 0.02%)</title><rect x="15.0" y="213" width="0.3" height="15.0" fill="rgb(208,84,3)" rx="2" ry="2" />
<text  x="17.99" y="223.5" ></text>
</g>
<g >
<title>blk_update_request (16 samples, 0.01%)</title><rect x="1180.2" y="277" width="0.1" height="15.0" fill="rgb(231,29,21)" rx="2" ry="2" />
<text  x="1183.16" y="287.5" ></text>
</g>
<g >
<title>runtime.scanobject (29 samples, 0.02%)</title><rect x="10.7" y="405" width="0.3" height="15.0" fill="rgb(244,187,11)" rx="2" ry="2" />
<text  x="13.71" y="415.5" ></text>
</g>
<g >
<title>[perf] (16 samples, 0.01%)</title><rect x="21.1" y="357" width="0.2" height="15.0" fill="rgb(252,90,18)" rx="2" ry="2" />
<text  x="24.14" y="367.5" ></text>
</g>
<g >
<title>do_idle (93,089 samples, 73.85%)</title><rect x="309.9" y="437" width="871.4" height="15.0" fill="rgb(252,211,49)" rx="2" ry="2" />
<text  x="312.92" y="447.5" >do_idle</text>
</g>
<g >
<title>compress/flate.(*decompressor).huffSym (37 samples, 0.03%)</title><rect x="14.4" y="69" width="0.4" height="15.0" fill="rgb(243,70,6)" rx="2" ry="2" />
<text  x="17.45" y="79.5" ></text>
</g>
<g >
<title>archive/tar.(*regFileReader).Read (83 samples, 0.07%)</title><rect x="15.6" y="181" width="0.8" height="15.0" fill="rgb(233,163,26)" rx="2" ry="2" />
<text  x="18.61" y="191.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/archive.Apply (279 samples, 0.22%)</title><rect x="13.0" y="293" width="2.6" height="15.0" fill="rgb(246,198,23)" rx="2" ry="2" />
<text  x="15.97" y="303.5" ></text>
</g>
<g >
<title>os.(*File).Write (11 samples, 0.01%)</title><rect x="12.8" y="341" width="0.1" height="15.0" fill="rgb(252,27,29)" rx="2" ry="2" />
<text  x="15.84" y="351.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (37 samples, 0.03%)</title><rect x="1180.9" y="357" width="0.4" height="15.0" fill="rgb(251,226,12)" rx="2" ry="2" />
<text  x="1183.95" y="367.5" ></text>
</g>
<g >
<title>jq (191 samples, 0.15%)</title><rect x="18.3" y="501" width="1.8" height="15.0" fill="rgb(210,123,45)" rx="2" ry="2" />
<text  x="21.34" y="511.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/vendor/github.com/grpc-ecosystem/go-grpc-prometheus.(*ServerMetrics).StreamServerInterceptor.func1 (26 samples, 0.02%)</title><rect x="12.7" y="421" width="0.3" height="15.0" fill="rgb(252,29,33)" rx="2" ry="2" />
<text  x="15.71" y="431.5" ></text>
</g>
<g >
<title>syscall.Syscall (11 samples, 0.01%)</title><rect x="12.8" y="309" width="0.1" height="15.0" fill="rgb(219,40,39)" rx="2" ry="2" />
<text  x="15.84" y="319.5" ></text>
</g>
<g >
<title>blk_mq_sched_dispatch_requests (16 samples, 0.01%)</title><rect x="20.3" y="341" width="0.2" height="15.0" fill="rgb(247,99,50)" rx="2" ry="2" />
<text  x="23.33" y="351.5" ></text>
</g>
<g >
<title>io.(*teeReader).Read (200 samples, 0.16%)</title><rect x="13.1" y="181" width="1.9" height="15.0" fill="rgb(231,202,34)" rx="2" ry="2" />
<text  x="16.12" y="191.5" ></text>
</g>
<g >
<title>[zedbox] (599 samples, 0.48%)</title><rect x="1184.2" y="373" width="5.7" height="15.0" fill="rgb(253,19,34)" rx="2" ry="2" />
<text  x="1187.24" y="383.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (44 samples, 0.03%)</title><rect x="309.2" y="341" width="0.5" height="15.0" fill="rgb(243,113,17)" rx="2" ry="2" />
<text  x="312.24" y="351.5" ></text>
</g>
<g >
<title>virtscsi_add_cmd (12 samples, 0.01%)</title><rect x="20.4" y="277" width="0.1" height="15.0" fill="rgb(229,80,36)" rx="2" ry="2" />
<text  x="23.36" y="287.5" ></text>
</g>
<g >
<title>wb_writeback (11 samples, 0.01%)</title><rect x="20.5" y="405" width="0.1" height="15.0" fill="rgb(218,99,22)" rx="2" ry="2" />
<text  x="23.50" y="415.5" ></text>
</g>
<g >
<title>[zedbox] (536 samples, 0.43%)</title><rect x="1184.7" y="357" width="5.0" height="15.0" fill="rgb(228,82,0)" rx="2" ry="2" />
<text  x="1187.73" y="367.5" ></text>
</g>
<g >
<title>[jq] (56 samples, 0.04%)</title><rect x="19.5" y="469" width="0.5" height="15.0" fill="rgb(229,148,52)" rx="2" ry="2" />
<text  x="22.46" y="479.5" ></text>
</g>
<g >
<title>compress/flate.(*decompressor).Read (196 samples, 0.16%)</title><rect x="13.1" y="117" width="1.9" height="15.0" fill="rgb(227,10,53)" rx="2" ry="2" />
<text  x="16.12" y="127.5" ></text>
</g>
<g >
<title>irq_exit (44 samples, 0.03%)</title><rect x="309.2" y="357" width="0.5" height="15.0" fill="rgb(242,145,23)" rx="2" ry="2" />
<text  x="312.24" y="367.5" ></text>
</g>
<g >
<title>runtime.notetsleepg (13 samples, 0.01%)</title><rect x="11.0" y="437" width="0.1" height="15.0" fill="rgb(235,205,8)" rx="2" ry="2" />
<text  x="14.02" y="447.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (16 samples, 0.01%)</title><rect x="1180.5" y="181" width="0.2" height="15.0" fill="rgb(245,219,44)" rx="2" ry="2" />
<text  x="1183.51" y="191.5" ></text>
</g>
<g >
<title>scsi_io_completion (30 samples, 0.02%)</title><rect x="1180.0" y="309" width="0.3" height="15.0" fill="rgb(243,188,42)" rx="2" ry="2" />
<text  x="1183.05" y="319.5" ></text>
</g>
<g >
<title>worker_thread (11 samples, 0.01%)</title><rect x="20.5" y="453" width="0.1" height="15.0" fill="rgb(235,141,29)" rx="2" ry="2" />
<text  x="23.50" y="463.5" ></text>
</g>
<g >
<title>__blk_mq_delay_run_hw_queue (16 samples, 0.01%)</title><rect x="20.3" y="373" width="0.2" height="15.0" fill="rgb(225,49,45)" rx="2" ry="2" />
<text  x="23.33" y="383.5" ></text>
</g>
<g >
<title>[zedbox] (286 samples, 0.23%)</title><rect x="1186.4" y="277" width="2.7" height="15.0" fill="rgb(223,158,32)" rx="2" ry="2" />
<text  x="1189.41" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (11 samples, 0.01%)</title><rect x="11.0" y="405" width="0.1" height="15.0" fill="rgb(225,132,8)" rx="2" ry="2" />
<text  x="14.03" y="415.5" ></text>
</g>
<g >
<title>dnsmasq (57 samples, 0.05%)</title><rect x="16.9" y="501" width="0.6" height="15.0" fill="rgb(219,111,6)" rx="2" ry="2" />
<text  x="19.95" y="511.5" ></text>
</g>
<g >
<title>vfs_write (18 samples, 0.01%)</title><rect x="1189.6" y="293" width="0.1" height="15.0" fill="rgb(232,89,31)" rx="2" ry="2" />
<text  x="1192.58" y="303.5" ></text>
</g>
<g >
<title>[libpython3.8.so.1.0] (37 samples, 0.03%)</title><rect x="21.7" y="469" width="0.3" height="15.0" fill="rgb(235,199,54)" rx="2" ry="2" />
<text  x="24.68" y="479.5" ></text>
</g>
</g>
</svg>
